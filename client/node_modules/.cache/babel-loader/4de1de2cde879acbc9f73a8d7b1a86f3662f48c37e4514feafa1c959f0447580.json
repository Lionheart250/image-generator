{"ast":null,"code":"var _jsxFileName = \"/Users/jack/image-generator/client/src/pages/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport { useAuth } from '../context/AuthContext'; // Import useAuth to access the AuthContext\nimport { useProfile } from '../context/ProfileContext';\nimport './Login.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const {\n    setProfilePicture\n  } = useProfile();\n  const navigate = useNavigate();\n  const {\n    login\n  } = useAuth(); // Access login function from AuthContext\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const fetchProfilePicture = async token => {\n    try {\n      const response = await fetch('http://localhost:3000/profile_picture', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data.profile_picture) {\n          setProfilePicture(`http://localhost:3000/${data.profile_picture}`);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching profile picture:', error);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const payload = {\n      email,\n      password\n    };\n    try {\n      const response = await fetch('http://localhost:3000/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Store token and userId\n        const {\n          token,\n          refreshToken\n        } = data; // Assuming the response also includes a refresh token\n        localStorage.setItem('token', token); // Save the token for future use\n\n        // Decode token to get userId\n        const decodedToken = jwtDecode(token);\n        localStorage.setItem('userId', decodedToken.userId); // Save userId to localStorage\n\n        // Call the login function to update the user context\n        login(token, refreshToken); // Add refresh token if available\n\n        await fetchProfilePicture(token);\n        navigate('/'); // Redirect to home page\n      } else {\n        alert(data.error || 'An error occurred.');\n      }\n    } catch (err) {\n      alert('Failed to connect to the server.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"login-heading\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"login-form\",\n      className: \"login-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"login-label\",\n          htmlFor: \"email\",\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"login-input\",\n          type: \"email\",\n          id: \"email\",\n          name: \"email\",\n          required: true,\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"login-label\",\n          htmlFor: \"password\",\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"login-input\",\n          type: \"password\",\n          id: \"password\",\n          name: \"password\",\n          required: true,\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"login-submit-btn\",\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"cOgZKlGhkqlVmPtRro3rKo6r2zw=\", false, function () {\n  return [useProfile, useNavigate, useAuth];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","jwtDecode","useAuth","useProfile","jsxDEV","_jsxDEV","Login","_s","setProfilePicture","navigate","login","email","setEmail","password","setPassword","fetchProfilePicture","token","response","fetch","headers","ok","data","json","profile_picture","error","console","handleSubmit","e","preventDefault","payload","method","body","JSON","stringify","refreshToken","localStorage","setItem","decodedToken","userId","alert","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","onSubmit","htmlFor","type","name","required","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/jack/image-generator/client/src/pages/Login.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; \nimport { jwtDecode } from 'jwt-decode'; \nimport { useAuth } from '../context/AuthContext'; // Import useAuth to access the AuthContext\nimport { useProfile } from '../context/ProfileContext';\nimport './Login.css';\n\nconst Login = () => {\n    const { setProfilePicture } = useProfile();\n    const navigate = useNavigate(); \n    const { login } = useAuth(); // Access login function from AuthContext\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const fetchProfilePicture = async (token) => {\n        try {\n            const response = await fetch('http://localhost:3000/profile_picture', {\n                headers: {\n                    'Authorization': `Bearer ${token}`\n                }\n            });\n            if (response.ok) {\n                const data = await response.json();\n                if (data.profile_picture) {\n                    setProfilePicture(`http://localhost:3000/${data.profile_picture}`);\n                }\n            }\n        } catch (error) {\n            console.error('Error fetching profile picture:', error);\n        }\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const payload = { email, password };\n\n        try {\n            const response = await fetch('http://localhost:3000/login', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(payload),\n            });\n\n            const data = await response.json();\n            if (response.ok) {\n                // Store token and userId\n                const { token, refreshToken } = data; // Assuming the response also includes a refresh token\n                localStorage.setItem('token', token); // Save the token for future use\n\n                // Decode token to get userId\n                const decodedToken = jwtDecode(token);\n                localStorage.setItem('userId', decodedToken.userId); // Save userId to localStorage\n                \n                // Call the login function to update the user context\n                login(token, refreshToken); // Add refresh token if available\n\n                await fetchProfilePicture(token);\n\n                navigate('/'); // Redirect to home page\n            } else {\n                alert(data.error || 'An error occurred.');\n            }\n        } catch (err) {\n            alert('Failed to connect to the server.');\n        }\n    };\n\n    return (\n        <div className=\"login-container\">\n            <h2 className=\"login-heading\">Login</h2>\n            <form id=\"login-form\" className=\"login-form\" onSubmit={handleSubmit}>\n                <div className=\"login-form-group\">\n                    <label className=\"login-label\" htmlFor=\"email\">Email:</label>\n                    <input\n                        className=\"login-input\"\n                        type=\"email\"\n                        id=\"email\"\n                        name=\"email\"\n                        required\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                </div>\n                <div className=\"login-form-group\">\n                    <label className=\"login-label\" htmlFor=\"password\">Password:</label>\n                    <input\n                        className=\"login-input\"\n                        type=\"password\"\n                        id=\"password\"\n                        name=\"password\"\n                        required\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                </div>\n                <button type=\"submit\" className=\"login-submit-btn\">Log In</button>\n            </form>\n        </div>\n    );\n};\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}