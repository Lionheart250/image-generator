{"ast":null,"code":"var _jsxFileName = \"/Users/jack/image-generator/client/src/pages/Gallery.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Ensure jwt-decode is installed\nimport './Gallery.css'; // Make sure this file exists with proper styles\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport debounce from 'lodash.debounce'; // Ensure lodash.debounce is installed\nimport { ReactComponent as LikeIcon } from '../assets/icons/like.svg';\nimport { ReactComponent as CommentIcon } from '../assets/icons/comment.svg';\nimport { ReactComponent as ShareIcon } from '../assets/icons/share.svg';\nimport { ReactComponent as BookmarkIcon } from '../assets/icons/bookmark.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Gallery = () => {\n  _s();\n  var _imageUserDetails$act, _imageUserDetails$act4, _images$find, _images$find2, _comments$activeImage;\n  const [images, setImages] = useState([]);\n  const [modalImage, setModalImage] = useState(null);\n  const [activeImageId, setActiveImageId] = useState(null);\n  const [likes, setLikes] = useState({});\n  const [comments, setComments] = useState({});\n  const [commentInput, setCommentInput] = useState('');\n  const [userLikedImages, setUserLikedImages] = useState(new Set());\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [username, setUsername] = useState(''); // For storing the username from the token\n  const [commentLikes, setCommentLikes] = useState({});\n  const [modalOpen, setModalOpen] = useState(false); // Add modalOpen state\n  const [imageUserDetails, setImageUserDetails] = useState({});\n  const navigate = useNavigate();\n  const location = useLocation();\n  const gridRef = useRef(null);\n  const [columns, setColumns] = useState(4);\n  const [sortType, setSortType] = useState('newest');\n  const [timeRange, setTimeRange] = useState('week');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [userLikedComments, setUserLikedComments] = useState(new Set());\n  const [selectionMode, setSelectionMode] = useState(false);\n  const [selectedImages, setSelectedImages] = useState(new Set());\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const loadingRef = useRef(null);\n  const [imageStats, setImageStats] = useState({});\n\n  // Add debounce wrapper at top of component\n  const debouncedOpenModal = useCallback(debounce(image => {\n    console.log('Opening modal for image ID:', image.id);\n    setActiveImageId(image.id);\n    setModalOpen(true);\n    fetchImageDetails(image.id);\n  }, 300), []);\n  useEffect(() => {\n    const fetchImagesAndCheckAuth = async () => {\n      const token = localStorage.getItem('token');\n\n      // Check auth status first\n      if (token) {\n        try {\n          const decoded = jwtDecode(token);\n          console.log('Decoded token:', decoded);\n          setIsAdmin(decoded.role === 'admin');\n          setUsername(decoded.username);\n        } catch (error) {\n          console.error('Token decode error:', error);\n          setIsAdmin(false);\n        }\n      }\n\n      // Fetch images with auth header if token exists\n      try {\n        var _data$images;\n        const response = await fetch('http://localhost:3000/images', {\n          headers: token ? {\n            'Authorization': `Bearer ${token}`\n          } : {}\n        });\n        const data = await response.json();\n        console.log('Fetched images:', (_data$images = data.images) === null || _data$images === void 0 ? void 0 : _data$images.length);\n        setImages(data.images || []);\n      } catch (error) {\n        console.error('Error fetching images:', error);\n        setImages([]);\n      }\n    };\n    fetchImagesAndCheckAuth();\n  }, []);\n\n  // Modify useEffect that handles URL parameters\n  useEffect(() => {\n    const imageId = new URLSearchParams(location.search).get('id');\n    if (imageId) {\n      const image = images.find(img => img.id === parseInt(imageId));\n      if (image && !modalOpen) {\n        // Add modalOpen check\n        debouncedOpenModal(image);\n      }\n    }\n  }, [location, images, modalOpen]); // Add proper dependencies\n\n  const fetchImageDetails = async imageId => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      // Fetch image details and comments in parallel\n      const [imageDetailsResponse, commentsResponse] = await Promise.all([fetch(`http://localhost:3000/images/${imageId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }), fetch(`http://localhost:3000/fetch_comments?id=${imageId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      })]);\n      if (imageDetailsResponse.ok) {\n        const imageData = await imageDetailsResponse.json();\n        setImageUserDetails(prev => ({\n          ...prev,\n          [imageId]: imageData\n        }));\n      }\n      if (commentsResponse.ok) {\n        const commentsData = await commentsResponse.json();\n        setComments(prev => ({\n          ...prev,\n          [imageId]: commentsData.comments\n        }));\n\n        // Update comment likes and user liked status\n        const commentLikesMap = {};\n        const userLikedCommentsSet = new Set();\n        commentsData.comments.forEach(comment => {\n          commentLikesMap[comment.id] = comment.like_count;\n          if (comment.user_has_liked) {\n            userLikedCommentsSet.add(comment.id);\n          }\n        });\n        setCommentLikes(prev => ({\n          ...prev,\n          ...commentLikesMap\n        }));\n        setUserLikedComments(userLikedCommentsSet);\n      }\n    } catch (error) {\n      console.error('Error fetching image details:', error);\n    }\n  };\n  const handleLike = async imageId => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    const isLiked = userLikedImages.has(imageId);\n    try {\n      const response = await fetch(`http://localhost:3000/likes/${imageId}`, {\n        method: isLiked ? 'DELETE' : 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to ${isLiked ? 'unlike' : 'like'} image`);\n      }\n      const data = await response.json();\n\n      // Update likes count\n      setLikes(prev => ({\n        ...prev,\n        [imageId]: data.count\n      }));\n\n      // Toggle like status\n      setUserLikedImages(prev => {\n        const newSet = new Set(prev);\n        if (isLiked) {\n          newSet.delete(imageId);\n        } else {\n          newSet.add(imageId);\n        }\n        return newSet;\n      });\n    } catch (error) {\n      console.error('Error toggling like:', error);\n    }\n  };\n\n  // Update comment state when adding new comment\n  const handleCommentSubmit = async e => {\n    e.preventDefault();\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      const decoded = jwtDecode(token);\n      const userId = decoded.userId;\n\n      // Post the new comment\n      const response = await fetch('http://localhost:3000/add_comment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          userId,\n          imageId: activeImageId,\n          comment: commentInput\n        })\n      });\n      if (response.ok) {\n        // After adding the comment, fetch all comments again\n        const commentsResponse = await fetch(`http://localhost:3000/fetch_comments?id=${activeImageId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (commentsResponse.ok) {\n          const commentsData = await commentsResponse.json();\n          // Update comments state with the latest comments\n          setComments(prev => ({\n            ...prev,\n            [activeImageId]: commentsData.comments // Use the fetched comments\n          }));\n          setCommentInput(''); // Clear the comment input\n        } else {\n          console.error('Error fetching comments:', await commentsResponse.json());\n        }\n      } else {\n        console.error('Error adding comment:', await response.json());\n      }\n    } catch (error) {\n      console.error('Error adding comment:', error);\n    }\n  };\n  const handleDeleteImage = async imageId => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`http://localhost:3000/images/${imageId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to delete image');\n      }\n      setImages(prev => prev.filter(img => img.id !== imageId));\n      closeModal();\n    } catch (error) {\n      console.error('Error deleting image:', error);\n      alert(error.message);\n    }\n  };\n  const handleCommentLike = async commentId => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    const isLiked = userLikedComments.has(commentId);\n    try {\n      const response = await fetch(`http://localhost:3000/comment_likes/${commentId}`, {\n        method: isLiked ? 'DELETE' : 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to toggle like');\n      const data = await response.json();\n      setCommentLikes(prev => ({\n        ...prev,\n        [commentId]: data.count || 0\n      }));\n      setUserLikedComments(prev => {\n        const newSet = new Set(prev);\n        isLiked ? newSet.delete(commentId) : newSet.add(commentId);\n        return newSet;\n      });\n    } catch (error) {\n      console.error('Error toggling comment like:', error);\n    }\n  };\n  const openModal = image => {\n    setModalImage(image.image_url);\n    setActiveImageId(image.id);\n    console.log('Opening modal for image ID:', image.id); // Debug log\n    fetchImageDetails(image.id);\n    navigate(`?id=${image.id}`, {\n      replace: true\n    });\n  };\n  const closeModal = () => {\n    setModalImage(null);\n    setActiveImageId(null);\n    navigate('', {\n      replace: true\n    });\n  };\n  const navigateImage = direction => {\n    const sortedImages = sortImages(images, sortType, timeRange);\n    const currentIndex = sortedImages.findIndex(img => img.id === activeImageId);\n\n    // Calculate current position in grid\n    const currentColumn = currentIndex % 4;\n    const currentRow = Math.floor(currentIndex / 4);\n    let nextIndex;\n    if (direction === 1) {\n      // Next\n      // If not at last column, move right\n      if (currentColumn < 3) {\n        nextIndex = currentIndex + 1;\n      }\n      // If at last column, move to first column of next row\n      else {\n        nextIndex = (currentRow + 1) * 4;\n      }\n    } else {\n      // Previous\n      // If not at first column, move left\n      if (currentColumn > 0) {\n        nextIndex = currentIndex - 1;\n      }\n      // If at first column, move to last column of previous row\n      else if (currentRow > 0) {\n        nextIndex = currentRow * 4 - 1;\n      }\n      // If at first column of first row, stay put\n      else {\n        return;\n      }\n    }\n\n    // Check if next index exists\n    if (nextIndex >= 0 && nextIndex < sortedImages.length) {\n      const nextImage = sortedImages[nextIndex];\n      setActiveImageId(nextImage.id);\n      setModalImage(nextImage.image_url);\n      fetchImageDetails(nextImage.id);\n      navigate(`?id=${nextImage.id}`, {\n        replace: true\n      });\n    }\n  };\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (!modalImage) return;\n      switch (e.key) {\n        case 'ArrowLeft':\n          navigateImage(-1);\n          break;\n        case 'ArrowRight':\n          navigateImage(1);\n          break;\n        case 'Escape':\n          closeModal();\n          break;\n        default:\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [modalImage, activeImageId]);\n\n  // Add this utility function\n  const formatTimestamp = timestamp => {\n    // Replace the space with \"T\" to convert to ISO 8601 format\n    const formattedTimestamp = timestamp.replace(' ', 'T');\n    const now = new Date();\n    const commentDate = new Date(formattedTimestamp + 'Z'); // Adding 'Z' to indicate UTC\n\n    // Handle invalid date\n    if (isNaN(commentDate)) {\n      return \"Invalid date\";\n    }\n\n    // Calculate the difference in milliseconds and convert to seconds\n    const diffInSeconds = Math.floor((now.getTime() - commentDate.getTime()) / 1000);\n\n    // Check if the comment date is in the future\n    if (diffInSeconds < 0) {\n      return \"In the future\";\n    }\n    if (diffInSeconds < 60) {\n      return `${diffInSeconds}s ago`;\n    }\n    const diffInMinutes = Math.floor(diffInSeconds / 60);\n    if (diffInMinutes < 60) {\n      return `${diffInMinutes}m ago`;\n    }\n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) {\n      return `${diffInHours}h ago`;\n    }\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) {\n      return `${diffInDays}d ago`;\n    }\n\n    // Return formatted date string\n    return commentDate.toLocaleDateString(undefined, {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n  const handleUsernameClick = user_id => {\n    navigate(`/profile/${user_id}`);\n  };\n\n  // Add formatDate function\n  const formatDate = date => {\n    if (!date) return '';\n    const d = new Date(date);\n    return d.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n  const sortImages = (images, sortType, timeRange) => {\n    // First filter by time range if needed\n    let filteredImages = [...images];\n    if (sortType === 'trending') {\n      const timeRanges = {\n        'day': 24 * 60 * 60 * 1000,\n        'week': 7 * 24 * 60 * 60 * 1000,\n        'month': 30 * 24 * 60 * 60 * 1000,\n        'year': 365 * 24 * 60 * 60 * 1000\n      };\n      const cutoff = new Date(Date.now() - timeRanges[timeRange]);\n      filteredImages = filteredImages.filter(img => new Date(img.created_at) > cutoff);\n    }\n\n    // Filter by category if selected\n    if (selectedCategory !== 'all') {\n      filteredImages = filteredImages.filter(img => {\n        var _img$categories;\n        return (_img$categories = img.categories) === null || _img$categories === void 0 ? void 0 : _img$categories.includes(selectedCategory);\n      });\n    }\n\n    // Sort based on type\n    switch (sortType) {\n      case 'newest':\n        return filteredImages.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n      case 'mostLiked':\n        return filteredImages.sort((a, b) => {\n          const aLikes = likes[a.id] || 0;\n          const bLikes = likes[b.id] || 0;\n          return bLikes - aLikes;\n        });\n      case 'mostCommented':\n        return filteredImages.sort((a, b) => {\n          var _comments$b$id, _comments$a$id;\n          return (((_comments$b$id = comments[b.id]) === null || _comments$b$id === void 0 ? void 0 : _comments$b$id.length) || 0) - (((_comments$a$id = comments[a.id]) === null || _comments$a$id === void 0 ? void 0 : _comments$a$id.length) || 0);\n        });\n      case 'trending':\n        return filteredImages.sort((a, b) => {\n          var _comments$a$id2, _comments$b$id2;\n          // Get likes and comments\n          const aLikes = likes[a.id] || 0;\n          const bLikes = likes[b.id] || 0;\n          const aComments = ((_comments$a$id2 = comments[a.id]) === null || _comments$a$id2 === void 0 ? void 0 : _comments$a$id2.length) || 0;\n          const bComments = ((_comments$b$id2 = comments[b.id]) === null || _comments$b$id2 === void 0 ? void 0 : _comments$b$id2.length) || 0;\n\n          // Hours since post (minimum 1 hour)\n          const aHours = Math.max(1, (Date.now() - new Date(a.created_at)) / 3600000);\n          const bHours = Math.max(1, (Date.now() - new Date(b.created_at)) / 3600000);\n\n          // Reddit-inspired algorithm with comments weighted 2x\n          const gravity = 1.8; // Higher = faster decay\n          const aScore = (aLikes + aComments * 2) / Math.pow(aHours, gravity);\n          const bScore = (bLikes + bComments * 2) / Math.pow(bHours, gravity);\n          return bScore - aScore;\n        });\n      default:\n        return filteredImages;\n    }\n  };\n  const createColumns = (images, numColumns) => {\n    // Get sorted images using our sortImages function\n    const sortedImages = sortImages(images, sortType, timeRange);\n\n    // Initialize columns\n    const cols = Array.from({\n      length: numColumns\n    }, () => []);\n    const colHeights = new Array(numColumns).fill(0);\n\n    // Distribute in chronological order\n    sortedImages.forEach((image, index) => {\n      const targetCol = index % numColumns;\n      const aspectRatio = image.width / image.height;\n      const estimatedHeight = 250 / aspectRatio;\n      cols[targetCol].push(image);\n      colHeights[targetCol] += estimatedHeight;\n    });\n    return cols;\n  };\n  useEffect(() => {\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const columnWidth = 250; // Base column width\n      const containerWidth = width - 200; // Account for sidebar and margins\n      const calculatedColumns = Math.floor(containerWidth / columnWidth);\n      setColumns(Math.min(4, Math.max(1, calculatedColumns)));\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize();\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  const columnImages = createColumns(images, columns);\n  useEffect(() => {\n    const fetchAllData = async () => {\n      try {\n        // Get images first\n        const imagesResponse = await fetch('http://localhost:3000/images');\n        const imagesData = await imagesResponse.json();\n        setImages(imagesData.images || []);\n\n        // Then fetch details for all images\n        const token = localStorage.getItem('token');\n        if (!token) return;\n        const promises = imagesData.images.map(async image => {\n          const [detailsRes, likesRes, commentsRes] = await Promise.all([fetch(`http://localhost:3000/images/${image.id}`, {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          }), fetch(`http://localhost:3000/fetch_likes?id=${image.id}`, {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          }), fetch(`http://localhost:3000/fetch_comments?id=${image.id}`, {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          })]);\n          const [details, likes, comments] = await Promise.all([detailsRes.json(), likesRes.json(), commentsRes.json()]);\n          return {\n            id: image.id,\n            details,\n            likes,\n            comments\n          };\n        });\n        const results = await Promise.all(promises);\n\n        // Update all states at once\n        const newImageUserDetails = {};\n        const newLikes = {};\n        const newComments = {};\n        const newUserLikedImages = new Set();\n        results.forEach(({\n          id,\n          details,\n          likes,\n          comments\n        }) => {\n          newImageUserDetails[id] = details;\n          newLikes[id] = likes.likes || 0;\n          newComments[id] = comments.comments || [];\n          if (likes.userHasLiked) {\n            newUserLikedImages.add(id);\n          }\n        });\n        setImageUserDetails(newImageUserDetails);\n        setLikes(newLikes);\n        setComments(newComments);\n        setUserLikedImages(newUserLikedImages);\n      } catch (error) {\n        console.error('Error fetching all data:', error);\n      }\n    };\n    fetchAllData();\n  }, []);\n  const fetchAllData = async imageId => {\n    if (!imageId) {\n      console.log('No image ID provided');\n      return;\n    }\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No auth token found');\n      return;\n    }\n    try {\n      const [likesResponse, commentsResponse] = await Promise.all([\n      // Update likes endpoint to match server route\n      fetch(`http://localhost:3000/likes/${imageId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      }), fetch(`http://localhost:3000/fetch_comments?id=${imageId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      })]);\n\n      // Check responses individually\n      if (!likesResponse.ok) {\n        const likesError = await likesResponse.text();\n        console.error('Likes fetch error:', likesError);\n        throw new Error('Failed to fetch likes');\n      }\n      if (!commentsResponse.ok) {\n        const commentsError = await commentsResponse.text();\n        console.error('Comments fetch error:', commentsError);\n        throw new Error('Failed to fetch comments');\n      }\n\n      // Parse JSON responses\n      const likesData = await likesResponse.json();\n      const commentsData = await commentsResponse.json();\n\n      // Update state\n      setLikes(prev => ({\n        ...prev,\n        [imageId]: likesData.count\n      }));\n      setUserLikedImages(prev => {\n        const newSet = new Set(prev);\n        if (likesData.userHasLiked) {\n          newSet.add(imageId);\n        } else {\n          newSet.delete(imageId);\n        }\n        return newSet;\n      });\n      setComments(prev => ({\n        ...prev,\n        [imageId]: commentsData.comments || []\n      }));\n    } catch (error) {\n      console.error('Error fetching data for image', imageId, ':', error);\n      setLikes(prev => ({\n        ...prev,\n        [imageId]: 0\n      }));\n      setComments(prev => ({\n        ...prev,\n        [imageId]: []\n      }));\n    }\n  };\n  useEffect(() => {\n    if (activeImageId) {\n      fetchAllData(activeImageId);\n    }\n  }, [activeImageId]);\n  const fetchCommentLikes = async commentId => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      const response = await fetch(`http://localhost:3000/comment_likes/${commentId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setCommentLikes(prev => ({\n          ...prev,\n          [commentId]: data.count\n        }));\n        if (data.user_liked) {\n          setUserLikedComments(prev => new Set([...prev, commentId]));\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching comment likes:', error);\n    }\n  };\n\n  // Add admin controls\n  const handleBulkDelete = async () => {\n    if (!isAdmin || selectedImages.size === 0) return;\n    if (!window.confirm(`Delete ${selectedImages.size} images?`)) return;\n    const token = localStorage.getItem('token');\n    let failedDeletes = 0;\n    try {\n      // Delete images sequentially\n      for (const imageId of selectedImages) {\n        try {\n          const response = await fetch(`http://localhost:3000/images/${imageId}`, {\n            method: 'DELETE',\n            headers: {\n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            }\n          });\n          if (!response.ok) {\n            failedDeletes++;\n          }\n        } catch (error) {\n          failedDeletes++;\n          console.error(`Failed to delete image ${imageId}:`, error);\n        }\n      }\n\n      // Update UI\n      setImages(prev => prev.filter(img => !selectedImages.has(img.id)));\n      setSelectedImages(new Set());\n      setSelectionMode(false);\n      if (failedDeletes > 0) {\n        alert(`Failed to delete ${failedDeletes} images`);\n      }\n    } catch (error) {\n      console.error('Bulk delete error:', error);\n      alert('Failed to delete images');\n    }\n  };\n  const handleSelectAll = () => {\n    const allImageIds = new Set(images.map(img => img.id));\n    setSelectedImages(allImageIds);\n  };\n\n  // Add intersection observer effect\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        setPage(prev => prev + 1);\n      }\n    }, {\n      threshold: 0.1\n    });\n    if (loadingRef.current) {\n      observer.observe(loadingRef.current);\n    }\n    return () => observer.disconnect();\n  }, [hasMore]);\n\n  // Modify existing fetchImages useEffect\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await fetch(`http://localhost:3000/images?page=${page}&limit=20&sortType=${sortType}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await response.json();\n        if (page === 1) {\n          setImages(data.images);\n        } else {\n          setImages(prev => [...prev, ...data.images]);\n        }\n        setHasMore(data.hasMore);\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    };\n    fetchImages();\n  }, [page, sortType]);\n\n  // Reset page when sort type changes\n  useEffect(() => {\n    setPage(1);\n    setImages([]);\n  }, [sortType]);\n  const fetchAllImageStats = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:3000/image_stats', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      setImageStats(data);\n    } catch (error) {\n      console.error('Error fetching image stats:', error);\n    }\n  };\n  const getSortedImages = useCallback(() => {\n    return [...images].sort((a, b) => {\n      var _imageStats$b$id, _imageStats$a$id, _imageStats$b$id2, _imageStats$a$id2;\n      switch (sortType) {\n        case 'most_likes':\n          return (((_imageStats$b$id = imageStats[b.id]) === null || _imageStats$b$id === void 0 ? void 0 : _imageStats$b$id.likes) || 0) - (((_imageStats$a$id = imageStats[a.id]) === null || _imageStats$a$id === void 0 ? void 0 : _imageStats$a$id.likes) || 0);\n        case 'most_comments':\n          return (((_imageStats$b$id2 = imageStats[b.id]) === null || _imageStats$b$id2 === void 0 ? void 0 : _imageStats$b$id2.comments) || 0) - (((_imageStats$a$id2 = imageStats[a.id]) === null || _imageStats$a$id2 === void 0 ? void 0 : _imageStats$a$id2.comments) || 0);\n        case 'newest':\n          return new Date(b.created_at) - new Date(a.created_at);\n        default:\n          return 0;\n      }\n    });\n  }, [images, imageStats, sortType]);\n  useEffect(() => {\n    fetchAllImageStats();\n  }, []);\n  useEffect(() => {\n    if (Object.keys(imageStats).length > 0) {\n      const sortedImages = getSortedImages();\n      setImages(sortedImages);\n    }\n  }, [sortType, imageStats]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gallery-page\",\n    children: [isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectionMode(!selectionMode),\n        className: \"admin-button\",\n        children: selectionMode ? 'Cancel Selection' : 'Select Images'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 21\n      }, this), selectionMode && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSelectAll,\n          className: \"admin-button\",\n          children: \"Select All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBulkDelete,\n          className: \"admin-button delete\",\n          disabled: selectedImages.size === 0,\n          children: [\"Delete Selected (\", selectedImages.size, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 871,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedImages(new Set()),\n          className: \"admin-button\",\n          children: \"Clear Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 856,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gallery-container\",\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gallery-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            value: sortType,\n            onChange: e => setSortType(e.target.value),\n            className: \"gallery-sort\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"newest\",\n              children: \"Newest\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 896,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"mostLiked\",\n              children: \"Most Liked\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 897,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"mostCommented\",\n              children: \"Most Commented\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 898,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"trending\",\n              children: \"Trending\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 899,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 891,\n            columnNumber: 25\n          }, this), sortType === 'trending' && /*#__PURE__*/_jsxDEV(\"select\", {\n            value: timeRange,\n            onChange: e => setTimeRange(e.target.value),\n            className: \"gallery-time-range\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"day\",\n              children: \"24 Hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 908,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"week\",\n              children: \"This Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 909,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"month\",\n              children: \"This Month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 910,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"year\",\n              children: \"This Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 911,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 903,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedCategory,\n            onChange: e => setSelectedCategory(e.target.value),\n            className: \"gallery-category\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"all\",\n              children: \"All Categories\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 920,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"portraits\",\n              children: \"Portraits\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 921,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"landscapes\",\n              children: \"Landscapes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 922,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"abstract\",\n              children: \"Abstract\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 923,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"anime\",\n              children: \"Anime\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 924,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 915,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 890,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"gallery-heading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 928,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gallery-grid\",\n          ref: gridRef,\n          children: columnImages.map((col, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gallery-column\",\n            children: col.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"gallery-item\",\n              children: [selectionMode && isAdmin && /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                className: \"image-checkbox\",\n                checked: selectedImages.has(image.id),\n                onChange: e => {\n                  const newSelected = new Set(selectedImages);\n                  if (e.target.checked) {\n                    newSelected.add(image.id);\n                  } else {\n                    newSelected.delete(image.id);\n                  }\n                  setSelectedImages(newSelected);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 935,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"gallery-thumbnail\",\n                src: image.image_url,\n                alt: image.prompt,\n                onClick: () => !selectionMode && openModal(image)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 950,\n                columnNumber: 41\n              }, this)]\n            }, image.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 933,\n              columnNumber: 37\n            }, this))\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 931,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 929,\n          columnNumber: 21\n        }, this), modalImage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gallery-modal\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gallery-modal-content\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"gallery-modal-main\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"gallery-modal-image-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"gallery-close-button\",\n                  onClick: closeModal,\n                  children: \"\\xD7\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 967,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"gallery-nav-button gallery-prev\",\n                  onClick: () => navigateImage(-1),\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"\\u2039\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 969,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 968,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"gallery-modal-image\",\n                  src: modalImage,\n                  alt: \"Enlarged\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 971,\n                  columnNumber: 41\n                }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"gallery-delete-section\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"gallery-delete-button\",\n                    onClick: () => handleDeleteImage(activeImageId),\n                    children: \"Delete Image\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 974,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 973,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"gallery-nav-button gallery-next\",\n                  onClick: () => navigateImage(1),\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"\\u203A\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 983,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 982,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 966,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"gallery-modal-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"gallery-user-info\",\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: ((_imageUserDetails$act = imageUserDetails[activeImageId]) === null || _imageUserDetails$act === void 0 ? void 0 : _imageUserDetails$act.profile_picture) || '/default-avatar.png',\n                    alt: \"Profile\",\n                    className: \"gallery-user-avatar\",\n                    onClick: () => {\n                      var _imageUserDetails$act2;\n                      return handleUsernameClick((_imageUserDetails$act2 = imageUserDetails[activeImageId]) === null || _imageUserDetails$act2 === void 0 ? void 0 : _imageUserDetails$act2.user_id);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 988,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"gallery-user-details\",\n                    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                      onClick: () => {\n                        var _imageUserDetails$act3;\n                        return handleUsernameClick((_imageUserDetails$act3 = imageUserDetails[activeImageId]) === null || _imageUserDetails$act3 === void 0 ? void 0 : _imageUserDetails$act3.user_id);\n                      },\n                      children: (_imageUserDetails$act4 = imageUserDetails[activeImageId]) === null || _imageUserDetails$act4 === void 0 ? void 0 : _imageUserDetails$act4.username\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 995,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"gallery-creation-date\",\n                      children: formatDate((_images$find = images.find(img => img.id === activeImageId)) === null || _images$find === void 0 ? void 0 : _images$find.created_at)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 998,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 994,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"gallery-follow-button\",\n                    children: \"Follow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1002,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 987,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"gallery-modal-title\",\n                  children: (_images$find2 = images.find(img => img.id === activeImageId)) === null || _images$find2 === void 0 ? void 0 : _images$find2.prompt\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1004,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"gallery-interaction-buttons\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => handleLike(activeImageId),\n                    className: \"gallery-action-btn\",\n                    children: [/*#__PURE__*/_jsxDEV(LikeIcon, {\n                      className: userLikedImages.has(activeImageId) ? 'liked' : ''\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1009,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: likes[activeImageId] || 0\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1010,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1008,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"gallery-action-btn\",\n                    children: [/*#__PURE__*/_jsxDEV(CommentIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1013,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: ((_comments$activeImage = comments[activeImageId]) === null || _comments$activeImage === void 0 ? void 0 : _comments$activeImage.length) || 0\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1014,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1012,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"gallery-action-btn\",\n                    children: /*#__PURE__*/_jsxDEV(ShareIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1017,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1016,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"gallery-action-btn\",\n                    children: /*#__PURE__*/_jsxDEV(BookmarkIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1020,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1019,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1007,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"gallery-comments-section\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    className: \"gallery-comments-heading\",\n                    children: \"Comments\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1025,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                    className: \"gallery-comments-list\",\n                    children: (comments[activeImageId] || []).map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n                      className: \"gallery-comment-item\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"gallery-comment-avatar\",\n                        children: /*#__PURE__*/_jsxDEV(\"img\", {\n                          src: comment.profile_picture ? `http://localhost:3000/${comment.profile_picture}` : '/default-avatar.png',\n                          alt: comment.username,\n                          onError: e => e.target.src = '/default-avatar.png'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1030,\n                          columnNumber: 61\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1029,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"gallery-comment-content\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"gallery-comment-header\",\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            className: \"gallery-comment-username\",\n                            onClick: () => handleUsernameClick(comment.user_id),\n                            role: \"button\",\n                            tabIndex: 0,\n                            children: comment.username\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1040,\n                            columnNumber: 65\n                          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                            className: \"gallery-comment-time\",\n                            children: formatTimestamp(comment.created_at)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1048,\n                            columnNumber: 65\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1039,\n                          columnNumber: 61\n                        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                          className: \"gallery-comment-text\",\n                          children: comment.comment\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1052,\n                          columnNumber: 61\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"gallery-comment-actions\",\n                          children: /*#__PURE__*/_jsxDEV(\"button\", {\n                            className: \"gallery-comment-like-btn\",\n                            onClick: () => handleCommentLike(comment.id),\n                            children: [\"\\u2665 \", commentLikes[comment.id] || 0]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1054,\n                            columnNumber: 65\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1053,\n                          columnNumber: 61\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1038,\n                        columnNumber: 57\n                      }, this)]\n                    }, `comment-${comment.id}-${comment.created_at}`, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1028,\n                      columnNumber: 53\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1026,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                    onSubmit: handleCommentSubmit,\n                    className: \"gallery-comment-form\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      className: \"gallery-comment-input\",\n                      type: \"text\",\n                      value: commentInput,\n                      onChange: e => setCommentInput(e.target.value),\n                      placeholder: \"Add a comment...\",\n                      required: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1066,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"submit\",\n                      className: \"gallery-comment-submit\",\n                      children: \"Post\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1074,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1065,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1024,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 986,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 965,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 964,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 963,\n          columnNumber: 25\n        }, this), hasMore && /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: loadingRef,\n          style: {\n            height: '20px',\n            margin: '20px 0'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1082,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 888,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 854,\n    columnNumber: 9\n  }, this);\n};\n_s(Gallery, \"mdtdm7A7oknrbIxEX2+EW9B+aZA=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Gallery;\nexport default Gallery;\nvar _c;\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","jwtDecode","useNavigate","useLocation","debounce","ReactComponent","LikeIcon","CommentIcon","ShareIcon","BookmarkIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","Gallery","_s","_imageUserDetails$act","_imageUserDetails$act4","_images$find","_images$find2","_comments$activeImage","images","setImages","modalImage","setModalImage","activeImageId","setActiveImageId","likes","setLikes","comments","setComments","commentInput","setCommentInput","userLikedImages","setUserLikedImages","Set","isAdmin","setIsAdmin","username","setUsername","commentLikes","setCommentLikes","modalOpen","setModalOpen","imageUserDetails","setImageUserDetails","navigate","location","gridRef","columns","setColumns","sortType","setSortType","timeRange","setTimeRange","selectedCategory","setSelectedCategory","userLikedComments","setUserLikedComments","selectionMode","setSelectionMode","selectedImages","setSelectedImages","page","setPage","hasMore","setHasMore","loadingRef","imageStats","setImageStats","debouncedOpenModal","image","console","log","id","fetchImageDetails","fetchImagesAndCheckAuth","token","localStorage","getItem","decoded","role","error","_data$images","response","fetch","headers","data","json","length","imageId","URLSearchParams","search","get","find","img","parseInt","imageDetailsResponse","commentsResponse","Promise","all","ok","imageData","prev","commentsData","commentLikesMap","userLikedCommentsSet","forEach","comment","like_count","user_has_liked","add","handleLike","isLiked","has","method","Error","count","newSet","delete","handleCommentSubmit","e","preventDefault","userId","Authorization","body","JSON","stringify","handleDeleteImage","credentials","filter","closeModal","alert","message","handleCommentLike","commentId","openModal","image_url","replace","navigateImage","direction","sortedImages","sortImages","currentIndex","findIndex","currentColumn","currentRow","Math","floor","nextIndex","nextImage","handleKeyDown","key","window","addEventListener","removeEventListener","formatTimestamp","timestamp","formattedTimestamp","now","Date","commentDate","isNaN","diffInSeconds","getTime","diffInMinutes","diffInHours","diffInDays","toLocaleDateString","undefined","year","month","day","handleUsernameClick","user_id","formatDate","date","d","filteredImages","timeRanges","cutoff","created_at","_img$categories","categories","includes","sort","a","b","aLikes","bLikes","_comments$b$id","_comments$a$id","_comments$a$id2","_comments$b$id2","aComments","bComments","aHours","max","bHours","gravity","aScore","pow","bScore","createColumns","numColumns","cols","Array","from","colHeights","fill","index","targetCol","aspectRatio","width","height","estimatedHeight","push","handleResize","innerWidth","columnWidth","containerWidth","calculatedColumns","min","columnImages","fetchAllData","imagesResponse","imagesData","promises","map","detailsRes","likesRes","commentsRes","details","results","newImageUserDetails","newLikes","newComments","newUserLikedImages","userHasLiked","likesResponse","likesError","text","commentsError","likesData","fetchCommentLikes","user_liked","handleBulkDelete","size","confirm","failedDeletes","handleSelectAll","allImageIds","observer","IntersectionObserver","entries","isIntersecting","threshold","current","observe","disconnect","fetchImages","fetchAllImageStats","getSortedImages","_imageStats$b$id","_imageStats$a$id","_imageStats$b$id2","_imageStats$a$id2","Object","keys","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","disabled","value","onChange","target","ref","col","colIndex","type","checked","newSelected","src","alt","prompt","profile_picture","_imageUserDetails$act2","_imageUserDetails$act3","onError","tabIndex","onSubmit","placeholder","required","style","margin","_c","$RefreshReg$"],"sources":["/Users/jack/image-generator/client/src/pages/Gallery.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Ensure jwt-decode is installed\nimport './Gallery.css'; // Make sure this file exists with proper styles\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport debounce from 'lodash.debounce'; // Ensure lodash.debounce is installed\nimport { ReactComponent as LikeIcon } from '../assets/icons/like.svg';\nimport { ReactComponent as CommentIcon } from '../assets/icons/comment.svg';\nimport { ReactComponent as ShareIcon } from '../assets/icons/share.svg';\nimport { ReactComponent as BookmarkIcon } from '../assets/icons/bookmark.svg';\n\nconst Gallery = () => {\n    const [images, setImages] = useState([]);\n    const [modalImage, setModalImage] = useState(null);\n    const [activeImageId, setActiveImageId] = useState(null);\n    const [likes, setLikes] = useState({});\n    const [comments, setComments] = useState({});\n    const [commentInput, setCommentInput] = useState('');\n    const [userLikedImages, setUserLikedImages] = useState(new Set());\n    const [isAdmin, setIsAdmin] = useState(false);\n    const [username, setUsername] = useState(''); // For storing the username from the token\n    const [commentLikes, setCommentLikes] = useState({});\n    const [modalOpen, setModalOpen] = useState(false); // Add modalOpen state\n    const [imageUserDetails, setImageUserDetails] = useState({});\n    const navigate = useNavigate();\n    const location = useLocation();\n    const gridRef = useRef(null);\n    const [columns, setColumns] = useState(4);\n    const [sortType, setSortType] = useState('newest');\n    const [timeRange, setTimeRange] = useState('week');\n    const [selectedCategory, setSelectedCategory] = useState('all');\n    const [userLikedComments, setUserLikedComments] = useState(new Set());\n    const [selectionMode, setSelectionMode] = useState(false);\n    const [selectedImages, setSelectedImages] = useState(new Set());\n    const [page, setPage] = useState(1);\n    const [hasMore, setHasMore] = useState(true);\n    const loadingRef = useRef(null);\n    const [imageStats, setImageStats] = useState({});\n\n    // Add debounce wrapper at top of component\n    const debouncedOpenModal = useCallback(\n        debounce((image) => {\n            console.log('Opening modal for image ID:', image.id);\n            setActiveImageId(image.id);\n            setModalOpen(true);\n            fetchImageDetails(image.id);\n        }, 300),\n        []\n    );\n\n    useEffect(() => {\n        const fetchImagesAndCheckAuth = async () => {\n            const token = localStorage.getItem('token');\n            \n            // Check auth status first\n            if (token) {\n                try {\n                    const decoded = jwtDecode(token);\n                    console.log('Decoded token:', decoded);\n                    setIsAdmin(decoded.role === 'admin');\n                    setUsername(decoded.username);\n                } catch (error) {\n                    console.error('Token decode error:', error);\n                    setIsAdmin(false);\n                }\n            }\n    \n            // Fetch images with auth header if token exists\n            try {\n                const response = await fetch('http://localhost:3000/images', {\n                    headers: token ? {\n                        'Authorization': `Bearer ${token}`\n                    } : {}\n                });\n                const data = await response.json();\n                console.log('Fetched images:', data.images?.length);\n                setImages(data.images || []);\n            } catch (error) {\n                console.error('Error fetching images:', error);\n                setImages([]);\n            }\n        };\n    \n        fetchImagesAndCheckAuth();\n    }, []);\n\n    // Modify useEffect that handles URL parameters\n    useEffect(() => {\n        const imageId = new URLSearchParams(location.search).get('id');\n        if (imageId) {\n            const image = images.find(img => img.id === parseInt(imageId));\n            if (image && !modalOpen) {  // Add modalOpen check\n                debouncedOpenModal(image);\n            }\n        }\n    }, [location, images, modalOpen]); // Add proper dependencies\n\n    const fetchImageDetails = async (imageId) => {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n\n        try {\n            // Fetch image details and comments in parallel\n            const [imageDetailsResponse, commentsResponse] = await Promise.all([\n                fetch(`http://localhost:3000/images/${imageId}`, {\n                    headers: { 'Authorization': `Bearer ${token}` }\n                }),\n                fetch(`http://localhost:3000/fetch_comments?id=${imageId}`, {\n                    headers: { 'Authorization': `Bearer ${token}` }\n                })\n            ]);\n\n            if (imageDetailsResponse.ok) {\n                const imageData = await imageDetailsResponse.json();\n                setImageUserDetails(prev => ({\n                    ...prev,\n                    [imageId]: imageData\n                }));\n            }\n\n            if (commentsResponse.ok) {\n                const commentsData = await commentsResponse.json();\n                setComments(prev => ({ \n                    ...prev, \n                    [imageId]: commentsData.comments \n                }));\n                \n                // Update comment likes and user liked status\n                const commentLikesMap = {};\n                const userLikedCommentsSet = new Set();\n                \n                commentsData.comments.forEach(comment => {\n                    commentLikesMap[comment.id] = comment.like_count;\n                    if (comment.user_has_liked) {\n                        userLikedCommentsSet.add(comment.id);\n                    }\n                });\n                \n                setCommentLikes(prev => ({\n                    ...prev,\n                    ...commentLikesMap\n                }));\n                \n                setUserLikedComments(userLikedCommentsSet);\n            }\n        } catch (error) {\n            console.error('Error fetching image details:', error);\n        }\n    };\n\n    const handleLike = async (imageId) => {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n    \n        const isLiked = userLikedImages.has(imageId);\n        \n        try {\n            const response = await fetch(`http://localhost:3000/likes/${imageId}`, {\n                method: isLiked ? 'DELETE' : 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n    \n            if (!response.ok) {\n                throw new Error(`Failed to ${isLiked ? 'unlike' : 'like'} image`);\n            }\n    \n            const data = await response.json();\n            \n            // Update likes count\n            setLikes(prev => ({\n                ...prev,\n                [imageId]: data.count\n            }));\n    \n            // Toggle like status\n            setUserLikedImages(prev => {\n                const newSet = new Set(prev);\n                if (isLiked) {\n                    newSet.delete(imageId);\n                } else {\n                    newSet.add(imageId);\n                }\n                return newSet;\n            });\n    \n        } catch (error) {\n            console.error('Error toggling like:', error);\n        }\n    };\n\n    // Update comment state when adding new comment\n    const handleCommentSubmit = async (e) => {\n        e.preventDefault();\n        const token = localStorage.getItem('token');\n        if (!token) return;\n    \n        try {\n            const decoded = jwtDecode(token);\n            const userId = decoded.userId;\n    \n            // Post the new comment\n            const response = await fetch('http://localhost:3000/add_comment', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                body: JSON.stringify({ userId, imageId: activeImageId, comment: commentInput }),\n            });\n    \n            if (response.ok) {\n                // After adding the comment, fetch all comments again\n                const commentsResponse = await fetch(`http://localhost:3000/fetch_comments?id=${activeImageId}`, {\n                    headers: {\n                        Authorization: `Bearer ${token}`,\n                    },\n                });\n    \n                if (commentsResponse.ok) {\n                    const commentsData = await commentsResponse.json();\n                    // Update comments state with the latest comments\n                    setComments((prev) => ({\n                        ...prev,\n                        [activeImageId]: commentsData.comments, // Use the fetched comments\n                    }));\n                    setCommentInput(''); // Clear the comment input\n                } else {\n                    console.error('Error fetching comments:', await commentsResponse.json());\n                }\n            } else {\n                console.error('Error adding comment:', await response.json());\n            }\n        } catch (error) {\n            console.error('Error adding comment:', error);\n        }\n    };\n\n    const handleDeleteImage = async (imageId) => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await fetch(`http://localhost:3000/images/${imageId}`, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                },\n                credentials: 'include'\n            });\n    \n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error.error || 'Failed to delete image');\n            }\n    \n            setImages(prev => prev.filter(img => img.id !== imageId));\n            closeModal();\n        } catch (error) {\n            console.error('Error deleting image:', error);\n            alert(error.message);\n        }\n    };\n\n    const handleCommentLike = async (commentId) => {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n    \n        const isLiked = userLikedComments.has(commentId);\n        try {\n            const response = await fetch(`http://localhost:3000/comment_likes/${commentId}`, {\n                method: isLiked ? 'DELETE' : 'POST',\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n    \n            if (!response.ok) throw new Error('Failed to toggle like');\n    \n            const data = await response.json();\n            setCommentLikes(prev => ({\n                ...prev,\n                [commentId]: data.count || 0\n            }));\n            setUserLikedComments(prev => {\n                const newSet = new Set(prev);\n                isLiked ? newSet.delete(commentId) : newSet.add(commentId);\n                return newSet;\n            });\n        } catch (error) {\n            console.error('Error toggling comment like:', error);\n        }\n    };\n\n    const openModal = (image) => {\n        setModalImage(image.image_url);\n        setActiveImageId(image.id);\n        console.log('Opening modal for image ID:', image.id); // Debug log\n        fetchImageDetails(image.id);\n        navigate(`?id=${image.id}`, { replace: true });\n    };\n\n    const closeModal = () => {\n        setModalImage(null);\n        setActiveImageId(null);\n        navigate('', { replace: true });\n    };\n\n    const navigateImage = (direction) => {\n        const sortedImages = sortImages(images, sortType, timeRange);\n        const currentIndex = sortedImages.findIndex(img => img.id === activeImageId);\n        \n        // Calculate current position in grid\n        const currentColumn = currentIndex % 4;\n        const currentRow = Math.floor(currentIndex / 4);\n        \n        let nextIndex;\n        if (direction === 1) { // Next\n            // If not at last column, move right\n            if (currentColumn < 3) {\n                nextIndex = currentIndex + 1;\n            } \n            // If at last column, move to first column of next row\n            else {\n                nextIndex = (currentRow + 1) * 4;\n            }\n        } else { // Previous\n            // If not at first column, move left\n            if (currentColumn > 0) {\n                nextIndex = currentIndex - 1;\n            }\n            // If at first column, move to last column of previous row\n            else if (currentRow > 0) {\n                nextIndex = (currentRow * 4) - 1;\n            }\n            // If at first column of first row, stay put\n            else {\n                return;\n            }\n        }\n        \n        // Check if next index exists\n        if (nextIndex >= 0 && nextIndex < sortedImages.length) {\n            const nextImage = sortedImages[nextIndex];\n            setActiveImageId(nextImage.id);\n            setModalImage(nextImage.image_url);\n            fetchImageDetails(nextImage.id);\n            navigate(`?id=${nextImage.id}`, { replace: true });\n        }\n    };\n\n    useEffect(() => {\n        const handleKeyDown = (e) => {\n            if (!modalImage) return;\n\n            switch(e.key) {\n                case 'ArrowLeft':\n                    navigateImage(-1);\n                    break;\n                case 'ArrowRight':\n                    navigateImage(1);\n                    break;\n                case 'Escape':\n                    closeModal();\n                    break;\n                default:\n                    break;\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyDown);\n        return () => window.removeEventListener('keydown', handleKeyDown);\n    }, [modalImage, activeImageId]);\n\n    // Add this utility function\n    const formatTimestamp = (timestamp) => {\n        // Replace the space with \"T\" to convert to ISO 8601 format\n        const formattedTimestamp = timestamp.replace(' ', 'T');\n    \n        const now = new Date();\n        const commentDate = new Date(formattedTimestamp + 'Z'); // Adding 'Z' to indicate UTC\n    \n        // Handle invalid date\n        if (isNaN(commentDate)) {\n            return \"Invalid date\";\n        }\n    \n        // Calculate the difference in milliseconds and convert to seconds\n        const diffInSeconds = Math.floor((now.getTime() - commentDate.getTime()) / 1000);\n    \n        // Check if the comment date is in the future\n        if (diffInSeconds < 0) {\n            return \"In the future\";\n        }\n    \n        if (diffInSeconds < 60) {\n            return `${diffInSeconds}s ago`;\n        }\n    \n        const diffInMinutes = Math.floor(diffInSeconds / 60);\n        if (diffInMinutes < 60) {\n            return `${diffInMinutes}m ago`;\n        }\n    \n        const diffInHours = Math.floor(diffInMinutes / 60);\n        if (diffInHours < 24) {\n            return `${diffInHours}h ago`;\n        }\n    \n        const diffInDays = Math.floor(diffInHours / 24);\n        if (diffInDays < 7) {\n            return `${diffInDays}d ago`;\n        }\n    \n        // Return formatted date string\n        return commentDate.toLocaleDateString(undefined, {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n        });\n    };\n        \n    const handleUsernameClick = (user_id) => {\n        navigate(`/profile/${user_id}`);\n    };\n\n    // Add formatDate function\n    const formatDate = (date) => {\n        if (!date) return '';\n        const d = new Date(date);\n        return d.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n        });\n    };\n\n    const sortImages = (images, sortType, timeRange) => {\n        // First filter by time range if needed\n        let filteredImages = [...images];\n        \n        if (sortType === 'trending') {\n            const timeRanges = {\n                'day': 24 * 60 * 60 * 1000,\n                'week': 7 * 24 * 60 * 60 * 1000,\n                'month': 30 * 24 * 60 * 60 * 1000,\n                'year': 365 * 24 * 60 * 60 * 1000\n            };\n            const cutoff = new Date(Date.now() - timeRanges[timeRange]);\n            filteredImages = filteredImages.filter(img => new Date(img.created_at) > cutoff);\n        }\n    \n        // Filter by category if selected\n        if (selectedCategory !== 'all') {\n            filteredImages = filteredImages.filter(img => \n                img.categories?.includes(selectedCategory)\n            );\n        }\n    \n        // Sort based on type\n        switch(sortType) {\n            case 'newest':\n                return filteredImages.sort((a, b) => \n                    new Date(b.created_at) - new Date(a.created_at)\n                );\n            case 'mostLiked':\n                return filteredImages.sort((a, b) => {\n                    const aLikes = (likes[a.id] || 0);\n                    const bLikes = (likes[b.id] || 0);\n                    return bLikes - aLikes;\n                });\n            case 'mostCommented':\n                return filteredImages.sort((a, b) => \n                    (comments[b.id]?.length || 0) - (comments[a.id]?.length || 0)\n                );\n                case 'trending':\n                    return filteredImages.sort((a, b) => {\n                        // Get likes and comments\n                        const aLikes = (likes[a.id] || 0);\n                        const bLikes = (likes[b.id] || 0);\n                        const aComments = (comments[a.id]?.length || 0);\n                        const bComments = (comments[b.id]?.length || 0);\n                        \n                        // Hours since post (minimum 1 hour)\n                        const aHours = Math.max(1, (Date.now() - new Date(a.created_at)) / 3600000);\n                        const bHours = Math.max(1, (Date.now() - new Date(b.created_at)) / 3600000);\n                        \n                        // Reddit-inspired algorithm with comments weighted 2x\n                        const gravity = 1.8; // Higher = faster decay\n                        const aScore = (aLikes + (aComments * 2)) / Math.pow(aHours, gravity);\n                        const bScore = (bLikes + (bComments * 2)) / Math.pow(bHours, gravity);\n                        \n                        return bScore - aScore;\n                    });\n            default:\n                return filteredImages;\n        }\n    };\n\n    const createColumns = (images, numColumns) => {\n        // Get sorted images using our sortImages function\n        const sortedImages = sortImages(images, sortType, timeRange);\n        \n        // Initialize columns\n        const cols = Array.from({ length: numColumns }, () => []);\n        const colHeights = new Array(numColumns).fill(0);\n        \n        // Distribute in chronological order\n        sortedImages.forEach((image, index) => {\n            const targetCol = index % numColumns;\n            const aspectRatio = image.width / image.height;\n            const estimatedHeight = 250 / aspectRatio;\n            \n            cols[targetCol].push(image);\n            colHeights[targetCol] += estimatedHeight;\n        });\n        \n        return cols;\n    };\n\n    useEffect(() => {\n        const handleResize = () => {\n            const width = window.innerWidth;\n            const columnWidth = 250; // Base column width\n            const containerWidth = width - 200; // Account for sidebar and margins\n            const calculatedColumns = Math.floor(containerWidth / columnWidth);\n            setColumns(Math.min(4, Math.max(1, calculatedColumns)));\n        };\n    \n        window.addEventListener('resize', handleResize);\n        handleResize();\n    \n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n    \n    const columnImages = createColumns(images, columns);\n\n    useEffect(() => {\n        const fetchAllData = async () => {\n            try {\n                // Get images first\n                const imagesResponse = await fetch('http://localhost:3000/images');\n                const imagesData = await imagesResponse.json();\n                setImages(imagesData.images || []);\n\n                // Then fetch details for all images\n                const token = localStorage.getItem('token');\n                if (!token) return;\n\n                const promises = imagesData.images.map(async (image) => {\n                    const [detailsRes, likesRes, commentsRes] = await Promise.all([\n                        fetch(`http://localhost:3000/images/${image.id}`, {\n                            headers: { 'Authorization': `Bearer ${token}` }\n                        }),\n                        fetch(`http://localhost:3000/fetch_likes?id=${image.id}`, {\n                            headers: { 'Authorization': `Bearer ${token}` }\n                        }),\n                        fetch(`http://localhost:3000/fetch_comments?id=${image.id}`, {\n                            headers: { 'Authorization': `Bearer ${token}` }\n                        })\n                    ]);\n\n                    const [details, likes, comments] = await Promise.all([\n                        detailsRes.json(),\n                        likesRes.json(),\n                        commentsRes.json()\n                    ]);\n\n                    return {\n                        id: image.id,\n                        details,\n                        likes,\n                        comments\n                    };\n                });\n\n                const results = await Promise.all(promises);\n\n                // Update all states at once\n                const newImageUserDetails = {};\n                const newLikes = {};\n                const newComments = {};\n                const newUserLikedImages = new Set();\n\n                results.forEach(({ id, details, likes, comments }) => {\n                    newImageUserDetails[id] = details;\n                    newLikes[id] = likes.likes || 0;\n                    newComments[id] = comments.comments || [];\n                    if (likes.userHasLiked) {\n                        newUserLikedImages.add(id);\n                    }\n                });\n\n                setImageUserDetails(newImageUserDetails);\n                setLikes(newLikes);\n                setComments(newComments);\n                setUserLikedImages(newUserLikedImages);\n\n            } catch (error) {\n                console.error('Error fetching all data:', error);\n            }\n        };\n\n        fetchAllData();\n    }, []);\n\n    const fetchAllData = async (imageId) => {\n        if (!imageId) {\n            console.log('No image ID provided');\n            return;\n        }\n    \n        const token = localStorage.getItem('token');\n        if (!token) {\n            console.error('No auth token found');\n            return;\n        }\n    \n        try {\n            const [likesResponse, commentsResponse] = await Promise.all([\n                // Update likes endpoint to match server route\n                fetch(`http://localhost:3000/likes/${imageId}`, {\n                    method: 'GET',\n                    headers: {\n                        'Authorization': `Bearer ${token}`,\n                        'Content-Type': 'application/json'\n                    }\n                }),\n                fetch(`http://localhost:3000/fetch_comments?id=${imageId}`, {\n                    method: 'GET',\n                    headers: {\n                        'Authorization': `Bearer ${token}`,\n                        'Content-Type': 'application/json'\n                    }\n                })\n            ]);\n    \n            // Check responses individually\n            if (!likesResponse.ok) {\n                const likesError = await likesResponse.text();\n                console.error('Likes fetch error:', likesError);\n                throw new Error('Failed to fetch likes');\n            }\n    \n            if (!commentsResponse.ok) {\n                const commentsError = await commentsResponse.text();\n                console.error('Comments fetch error:', commentsError);\n                throw new Error('Failed to fetch comments');\n            }\n    \n            // Parse JSON responses\n            const likesData = await likesResponse.json();\n            const commentsData = await commentsResponse.json();\n    \n            // Update state\n            setLikes(prev => ({ \n                ...prev, \n                [imageId]: likesData.count \n            }));\n            setUserLikedImages(prev => {\n                const newSet = new Set(prev);\n                if (likesData.userHasLiked) {\n                    newSet.add(imageId);\n                } else {\n                    newSet.delete(imageId);\n                }\n                return newSet;\n            });\n            setComments(prev => ({ \n                ...prev, \n                [imageId]: commentsData.comments || [] \n            }));\n    \n        } catch (error) {\n            console.error('Error fetching data for image', imageId, ':', error);\n            setLikes(prev => ({ ...prev, [imageId]: 0 }));\n            setComments(prev => ({ ...prev, [imageId]: [] }));\n        }\n    };\n    \n    useEffect(() => {\n        if (activeImageId) {\n            fetchAllData(activeImageId);\n        }\n    }, [activeImageId]);\n\n    const fetchCommentLikes = async (commentId) => {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n    \n        try {\n            const response = await fetch(`http://localhost:3000/comment_likes/${commentId}`, {\n                headers: {\n                    'Authorization': `Bearer ${token}`\n                }\n            });\n    \n            if (response.ok) {\n                const data = await response.json();\n                setCommentLikes(prev => ({\n                    ...prev,\n                    [commentId]: data.count\n                }));\n                if (data.user_liked) {\n                    setUserLikedComments(prev => new Set([...prev, commentId]));\n                }\n            }\n        } catch (error) {\n            console.error('Error fetching comment likes:', error);\n        }\n    };\n\n    // Add admin controls\n    const handleBulkDelete = async () => {\n        if (!isAdmin || selectedImages.size === 0) return;\n        \n        if (!window.confirm(`Delete ${selectedImages.size} images?`)) return;\n    \n        const token = localStorage.getItem('token');\n        let failedDeletes = 0;\n    \n        try {\n            // Delete images sequentially\n            for (const imageId of selectedImages) {\n                try {\n                    const response = await fetch(`http://localhost:3000/images/${imageId}`, {\n                        method: 'DELETE',\n                        headers: {\n                            'Authorization': `Bearer ${token}`,\n                            'Content-Type': 'application/json'\n                        }\n                    });\n    \n                    if (!response.ok) {\n                        failedDeletes++;\n                    }\n                } catch (error) {\n                    failedDeletes++;\n                    console.error(`Failed to delete image ${imageId}:`, error);\n                }\n            }\n    \n            // Update UI\n            setImages(prev => prev.filter(img => !selectedImages.has(img.id)));\n            setSelectedImages(new Set());\n            setSelectionMode(false);\n    \n            if (failedDeletes > 0) {\n                alert(`Failed to delete ${failedDeletes} images`);\n            }\n        } catch (error) {\n            console.error('Bulk delete error:', error);\n            alert('Failed to delete images');\n        }\n    };\n\n    const handleSelectAll = () => {\n        const allImageIds = new Set(images.map(img => img.id));\n        setSelectedImages(allImageIds);\n    };\n\n    // Add intersection observer effect\n    useEffect(() => {\n        const observer = new IntersectionObserver(\n            (entries) => {\n                if (entries[0].isIntersecting && hasMore) {\n                    setPage(prev => prev + 1);\n                }\n            },\n            { threshold: 0.1 }\n        );\n\n        if (loadingRef.current) {\n            observer.observe(loadingRef.current);\n        }\n\n        return () => observer.disconnect();\n    }, [hasMore]);\n\n    // Modify existing fetchImages useEffect\n    useEffect(() => {\n        const fetchImages = async () => {\n            try {\n                const token = localStorage.getItem('token');\n                const response = await fetch(\n                    `http://localhost:3000/images?page=${page}&limit=20&sortType=${sortType}`, \n                    {\n                        headers: { Authorization: `Bearer ${token}` }\n                    }\n                );\n                const data = await response.json();\n                \n                if (page === 1) {\n                    setImages(data.images);\n                } else {\n                    setImages(prev => [...prev, ...data.images]);\n                }\n                setHasMore(data.hasMore);\n            } catch (error) {\n                console.error('Error:', error);\n            }\n        };\n\n        fetchImages();\n    }, [page, sortType]);\n\n    // Reset page when sort type changes\n    useEffect(() => {\n        setPage(1);\n        setImages([]);\n    }, [sortType]);\n\n    const fetchAllImageStats = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await fetch('http://localhost:3000/image_stats', {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n            const data = await response.json();\n            setImageStats(data);\n        } catch (error) {\n            console.error('Error fetching image stats:', error);\n        }\n    };\n\n    const getSortedImages = useCallback(() => {\n        return [...images].sort((a, b) => {\n            switch (sortType) {\n                case 'most_likes':\n                    return (imageStats[b.id]?.likes || 0) - (imageStats[a.id]?.likes || 0);\n                case 'most_comments':\n                    return (imageStats[b.id]?.comments || 0) - (imageStats[a.id]?.comments || 0);\n                case 'newest':\n                    return new Date(b.created_at) - new Date(a.created_at);\n                default:\n                    return 0;\n            }\n        });\n    }, [images, imageStats, sortType]);\n\n    useEffect(() => {\n        fetchAllImageStats();\n    }, []);\n\n    useEffect(() => {\n        if (Object.keys(imageStats).length > 0) {\n            const sortedImages = getSortedImages();\n            setImages(sortedImages);\n        }\n    }, [sortType, imageStats]);\n\n    return (\n        <div className=\"gallery-page\">\n            {isAdmin && (\n                <div className=\"admin-controls\">\n                    <button \n                        onClick={() => setSelectionMode(!selectionMode)}\n                        className=\"admin-button\"\n                    >\n                        {selectionMode ? 'Cancel Selection' : 'Select Images'}\n                    </button>\n                    {selectionMode && (\n                        <>\n                            <button \n                                onClick={handleSelectAll}\n                                className=\"admin-button\"\n                            >\n                                Select All\n                            </button>\n                            <button \n                                onClick={handleBulkDelete}\n                                className=\"admin-button delete\"\n                                disabled={selectedImages.size === 0}\n                            >\n                                Delete Selected ({selectedImages.size})\n                            </button>\n                            <button \n                                onClick={() => setSelectedImages(new Set())}\n                                className=\"admin-button\"\n                            >\n                                Clear Selection\n                            </button>\n                        </>\n                    )}\n                </div>\n            )}\n            <div className=\"gallery-container\">\n                <>\n                    <div className=\"gallery-controls\">\n                        <select \n                            value={sortType} \n                            onChange={(e) => setSortType(e.target.value)}\n                            className=\"gallery-sort\"\n                        >\n                            <option value=\"newest\">Newest</option>\n                            <option value=\"mostLiked\">Most Liked</option>\n                            <option value=\"mostCommented\">Most Commented</option>\n                            <option value=\"trending\">Trending</option>\n                        </select>\n\n                        {sortType === 'trending' && (\n                            <select\n                                value={timeRange}\n                                onChange={(e) => setTimeRange(e.target.value)}\n                                className=\"gallery-time-range\"\n                            >\n                                <option value=\"day\">24 Hours</option>\n                                <option value=\"week\">This Week</option>\n                                <option value=\"month\">This Month</option>\n                                <option value=\"year\">This Year</option>\n                            </select>\n                        )}\n\n                        <select\n                            value={selectedCategory}\n                            onChange={(e) => setSelectedCategory(e.target.value)}\n                            className=\"gallery-category\"\n                        >\n                            <option value=\"all\">All Categories</option>\n                            <option value=\"portraits\">Portraits</option>\n                            <option value=\"landscapes\">Landscapes</option>\n                            <option value=\"abstract\">Abstract</option>\n                            <option value=\"anime\">Anime</option>\n                            {/* Add more categories as needed */}\n                        </select>\n                    </div>\n                    <h2 className=\"gallery-heading\"></h2>\n                    <div className=\"gallery-grid\" ref={gridRef}>\n                        {columnImages.map((col, colIndex) => (\n                            <div key={colIndex} className=\"gallery-column\">\n                                {col.map((image) => (\n                                    <div key={image.id} className=\"gallery-item\">\n                                        {selectionMode && isAdmin && (\n                                            <input\n                                                type=\"checkbox\"\n                                                className=\"image-checkbox\"\n                                                checked={selectedImages.has(image.id)}\n                                                onChange={(e) => {\n                                                    const newSelected = new Set(selectedImages);\n                                                    if (e.target.checked) {\n                                                        newSelected.add(image.id);\n                                                    } else {\n                                                        newSelected.delete(image.id);\n                                                    }\n                                                    setSelectedImages(newSelected);\n                                                }}\n                                            />\n                                        )}\n                                        <img \n                                            className=\"gallery-thumbnail\" \n                                            src={image.image_url} \n                                            alt={image.prompt}\n                                            onClick={() => !selectionMode && openModal(image)}\n                                        />\n                                    </div>\n                                ))}\n                            </div>\n                        ))}\n                    </div>\n\n                    {modalImage && (\n                        <div className=\"gallery-modal\">\n                            <div className=\"gallery-modal-content\">\n                                <div className=\"gallery-modal-main\">\n                                    <div className=\"gallery-modal-image-container\">\n                                        <button className=\"gallery-close-button\" onClick={closeModal}>×</button>\n                                        <button className=\"gallery-nav-button gallery-prev\" onClick={() => navigateImage(-1)}>\n                                            <span>‹</span>\n                                        </button>\n                                        <img className=\"gallery-modal-image\" src={modalImage} alt=\"Enlarged\" />\n                                        {isAdmin && (\n                                            <div className=\"gallery-delete-section\">\n                                                <button \n                                                    className=\"gallery-delete-button\" \n                                                    onClick={() => handleDeleteImage(activeImageId)}\n                                                >\n                                                    Delete Image\n                                                </button>\n                                            </div>\n                                        )}\n                                        <button className=\"gallery-nav-button gallery-next\" onClick={() => navigateImage(1)}>\n                                            <span>›</span>\n                                        </button>\n                                    </div>\n                                    <div className=\"gallery-modal-info\">\n                                        <div className=\"gallery-user-info\">\n                                            <img \n                                                src={imageUserDetails[activeImageId]?.profile_picture || '/default-avatar.png'}\n                                                alt=\"Profile\"\n                                                className=\"gallery-user-avatar\"\n                                                onClick={() => handleUsernameClick(imageUserDetails[activeImageId]?.user_id)}\n                                            />\n                                            <div className=\"gallery-user-details\">\n                                                <h4 onClick={() => handleUsernameClick(imageUserDetails[activeImageId]?.user_id)}>\n                                                    {imageUserDetails[activeImageId]?.username}\n                                                </h4>\n                                                <span className=\"gallery-creation-date\">\n                                                    {formatDate(images.find(img => img.id === activeImageId)?.created_at)}\n                                                </span>\n                                            </div>\n                                            <button className=\"gallery-follow-button\">Follow</button>\n                                        </div>\n                                        <div className=\"gallery-modal-title\">\n                                            {images.find(img => img.id === activeImageId)?.prompt}\n                                        </div>\n                                        <div className=\"gallery-interaction-buttons\">\n                                            <button onClick={() => handleLike(activeImageId)} className=\"gallery-action-btn\">\n                                                <LikeIcon className={userLikedImages.has(activeImageId) ? 'liked' : ''} />\n                                                <span>{likes[activeImageId] || 0}</span>\n                                            </button>\n                                            <button className=\"gallery-action-btn\">\n                                                <CommentIcon />\n                                                <span>{comments[activeImageId]?.length || 0}</span>\n                                            </button>\n                                            <button className=\"gallery-action-btn\">\n                                                <ShareIcon />\n                                            </button>\n                                            <button className=\"gallery-action-btn\">\n                                                <BookmarkIcon />\n                                            </button>\n                                        </div>\n                                        {/* Existing comments section */}\n                                        <div className=\"gallery-comments-section\">\n                                            <h4 className=\"gallery-comments-heading\">Comments</h4>\n                                            <ul className=\"gallery-comments-list\">\n                                                {(comments[activeImageId] || []).map((comment) => (\n                                                    <li key={`comment-${comment.id}-${comment.created_at}`} className=\"gallery-comment-item\">\n                                                        <div className=\"gallery-comment-avatar\">\n                                                            <img \n                                                                src={comment.profile_picture ? \n                                                                    `http://localhost:3000/${comment.profile_picture}` : \n                                                                    '/default-avatar.png'} \n                                                                alt={comment.username}\n                                                                onError={(e) => e.target.src = '/default-avatar.png'}\n                                                            />\n                                                        </div>\n                                                        <div className=\"gallery-comment-content\">\n                                                            <div className=\"gallery-comment-header\">\n                                                                <span \n                                                                    className=\"gallery-comment-username\"\n                                                                    onClick={() => handleUsernameClick(comment.user_id)}\n                                                                    role=\"button\"\n                                                                    tabIndex={0}\n                                                                >\n                                                                    {comment.username}\n                                                                </span>\n                                                                <span className=\"gallery-comment-time\">\n                                                                    {formatTimestamp(comment.created_at)}\n                                                                </span>\n                                                            </div>\n                                                            <p className=\"gallery-comment-text\">{comment.comment}</p>\n                                                            <div className=\"gallery-comment-actions\">\n                                                                <button \n                                                                    className=\"gallery-comment-like-btn\"\n                                                                    onClick={() => handleCommentLike(comment.id)}\n                                                                >\n                                                                    ♥ {commentLikes[comment.id] || 0}\n                                                                </button>\n                                                            </div>\n                                                        </div>\n                                                    </li>\n                                                ))}\n                                            </ul>\n                                            <form onSubmit={handleCommentSubmit} className=\"gallery-comment-form\">\n                                                <input\n                                                    className=\"gallery-comment-input\"\n                                                    type=\"text\"\n                                                    value={commentInput}\n                                                    onChange={(e) => setCommentInput(e.target.value)}\n                                                    placeholder=\"Add a comment...\"\n                                                    required\n                                                />\n                                                <button type=\"submit\" className=\"gallery-comment-submit\">Post</button>\n                                            </form>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    {hasMore && <div ref={loadingRef} style={{ height: '20px', margin: '20px 0' }} />}\n                </>\n            </div>\n        </div>\n    );\n};\n\nexport default Gallery;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}