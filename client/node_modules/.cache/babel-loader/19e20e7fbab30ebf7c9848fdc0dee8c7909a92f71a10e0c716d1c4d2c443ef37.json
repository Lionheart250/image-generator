{"ast":null,"code":"var _jsxFileName = \"/Users/jack/image-generator/client/src/pages/Gallery.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Ensure jwt-decode is installed\nimport './Gallery.css'; // Make sure this file exists with proper styles\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport debounce from 'lodash.debounce'; // Ensure lodash.debounce is installed\nimport { ReactComponent as LikeIcon } from '../assets/icons/like.svg';\nimport { ReactComponent as CommentIcon } from '../assets/icons/comment.svg';\nimport { ReactComponent as ShareIcon } from '../assets/icons/share.svg';\nimport { ReactComponent as BookmarkIcon } from '../assets/icons/bookmark.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Gallery = () => {\n  _s();\n  var _imageUserDetails$act, _imageUserDetails$act4, _images$find, _images$find2, _comments$activeImage;\n  const [images, setImages] = useState([]);\n  const [modalImage, setModalImage] = useState(null);\n  const [activeImageId, setActiveImageId] = useState(null);\n  const [likes, setLikes] = useState({});\n  const [comments, setComments] = useState({});\n  const [commentInput, setCommentInput] = useState('');\n  const [userLikedImages, setUserLikedImages] = useState(new Set());\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [username, setUsername] = useState(''); // For storing the username from the token\n  const [commentLikes, setCommentLikes] = useState({});\n  const [modalOpen, setModalOpen] = useState(false); // Add modalOpen state\n  const [imageUserDetails, setImageUserDetails] = useState({});\n  const navigate = useNavigate();\n  const location = useLocation();\n  const gridRef = useRef(null);\n  const [columns, setColumns] = useState(4);\n  const [sortType, setSortType] = useState('newest');\n  const [timeRange, setTimeRange] = useState('week');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n\n  // Add debounce wrapper at top of component\n  const debouncedOpenModal = useCallback(debounce(image => {\n    console.log('Opening modal for image ID:', image.id);\n    setActiveImageId(image.id);\n    setModalOpen(true);\n    fetchImageDetails(image.id);\n  }, 300), []);\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/images');\n        const data = await response.json();\n        setImages(data.images || []);\n      } catch (error) {\n        console.error('Error fetching images:', error);\n      }\n    };\n    const checkAdminStatus = () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        const decoded = jwtDecode(token);\n        setIsAdmin(decoded.role === 'admin');\n        setUsername(decoded.username); // Extract the username from the token\n      }\n    };\n    fetchImages();\n    checkAdminStatus();\n  }, []);\n\n  // Modify useEffect that handles URL parameters\n  useEffect(() => {\n    const imageId = new URLSearchParams(location.search).get('id');\n    if (imageId) {\n      const image = images.find(img => img.id === parseInt(imageId));\n      if (image && !modalOpen) {\n        // Add modalOpen check\n        debouncedOpenModal(image);\n      }\n    }\n  }, [location, images, modalOpen]); // Add proper dependencies\n\n  const fetchImageDetails = async imageId => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      // Fetch user details for image\n      const imageDetailsResponse = await fetch(`http://localhost:3000/images/${imageId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (imageDetailsResponse.ok) {\n        const imageData = await imageDetailsResponse.json();\n        setImageUserDetails(prev => ({\n          ...prev,\n          [imageId]: imageData\n        }));\n      }\n\n      // Existing likes/comments fetch\n      const likeResponse = await fetch(`http://localhost:3000/fetch_likes?id=${imageId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (likeResponse.ok) {\n        const likeData = await likeResponse.json();\n        setLikes(prev => ({\n          ...prev,\n          [imageId]: likeData.likes || 0\n        }));\n        if (likeData.userHasLiked) {\n          setUserLikedImages(prev => new Set(prev).add(imageId));\n        }\n      }\n      const commentResponse = await fetch(`http://localhost:3000/fetch_comments?id=${imageId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (commentResponse.ok) {\n        const commentData = await commentResponse.json();\n        // Comments should now include profile_picture from backend\n        setComments(prev => ({\n          ...prev,\n          [imageId]: commentData.comments || []\n        }));\n      }\n    } catch (error) {\n      console.error('Error fetching image details:', error);\n    }\n  };\n  const handleLike = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) return; // Exit if no token is found\n\n    const userId = jwtDecode(token).userId; // Decode the token to get userId\n    const hasLiked = userLikedImages.has(activeImageId); // Check if the user has already liked this image\n\n    try {\n      const response = hasLiked ? await fetch('http://localhost:3000/remove_like', {\n        // Send request to remove like\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          userId,\n          // Include userId\n          imageId: activeImageId // Current imageId\n        })\n      }) : await fetch('http://localhost:3000/add_like', {\n        // Send request to add like\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          userId,\n          // Include userId\n          imageId: activeImageId // Current imageId\n        })\n      });\n      if (response.ok) {\n        if (hasLiked) {\n          // Remove like\n          setLikes(prev => ({\n            ...prev,\n            [activeImageId]: Math.max((prev[activeImageId] || 0) - 1, 0)\n          }));\n          setUserLikedImages(prev => {\n            const updatedLikes = new Set(prev);\n            updatedLikes.delete(activeImageId);\n            return updatedLikes;\n          });\n        } else {\n          // Add like\n          setLikes(prev => ({\n            ...prev,\n            [activeImageId]: (prev[activeImageId] || 0) + 1\n          }));\n          setUserLikedImages(prev => new Set(prev).add(activeImageId));\n        }\n      } else {\n        const errorData = await response.json();\n        console.error('Error toggling like:', errorData);\n      }\n    } catch (error) {\n      console.error('Error toggling like:', error);\n    }\n  };\n\n  // Update comment state when adding new comment\n  const handleCommentSubmit = async e => {\n    e.preventDefault();\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      const decoded = jwtDecode(token);\n      const userId = decoded.userId;\n\n      // Post the new comment\n      const response = await fetch('http://localhost:3000/add_comment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          userId,\n          imageId: activeImageId,\n          comment: commentInput\n        })\n      });\n      if (response.ok) {\n        // After adding the comment, fetch all comments again\n        const commentsResponse = await fetch(`http://localhost:3000/fetch_comments?id=${activeImageId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (commentsResponse.ok) {\n          const commentsData = await commentsResponse.json();\n          // Update comments state with the latest comments\n          setComments(prev => ({\n            ...prev,\n            [activeImageId]: commentsData.comments // Use the fetched comments\n          }));\n          setCommentInput(''); // Clear the comment input\n        } else {\n          console.error('Error fetching comments:', await commentsResponse.json());\n        }\n      } else {\n        console.error('Error adding comment:', await response.json());\n      }\n    } catch (error) {\n      console.error('Error adding comment:', error);\n    }\n  };\n  const handleDeleteImage = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No authentication token found');\n      return;\n    }\n    console.log(\"Attempting to delete image:\", activeImageId);\n    try {\n      const response = await fetch(`http://localhost:3000/delete_image/${activeImageId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        const data = await response.json();\n        throw new Error(data.error || 'Failed to delete image');\n      }\n      setImages(prev => prev.filter(image => image.id !== activeImageId));\n      closeModal();\n    } catch (error) {\n      console.error('Error deleting image:', error);\n      alert(error.message);\n    }\n  };\n  const handleCommentLike = async commentId => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      const response = await fetch('http://localhost:3000/like_comment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          commentId\n        })\n      });\n      if (response.ok) {\n        setCommentLikes(prev => ({\n          ...prev,\n          [commentId]: (prev[commentId] || 0) + 1\n        }));\n      }\n    } catch (error) {\n      console.error('Error liking comment:', error);\n    }\n  };\n  const openModal = image => {\n    setModalImage(image.image_url);\n    setActiveImageId(image.id);\n    console.log('Opening modal for image ID:', image.id); // Debug log\n    fetchImageDetails(image.id);\n    navigate(`?id=${image.id}`, {\n      replace: true\n    });\n  };\n  const closeModal = () => {\n    setModalImage(null);\n    setActiveImageId(null);\n    navigate('', {\n      replace: true\n    });\n  };\n  const navigateImage = direction => {\n    const sortedImages = sortImages(images, sortType, timeRange);\n    const currentIndex = sortedImages.findIndex(img => img.id === activeImageId);\n\n    // Calculate current position in grid\n    const currentColumn = currentIndex % 4;\n    const currentRow = Math.floor(currentIndex / 4);\n    let nextIndex;\n    if (direction === 1) {\n      // Next\n      // If not at last column, move right\n      if (currentColumn < 3) {\n        nextIndex = currentIndex + 1;\n      }\n      // If at last column, move to first column of next row\n      else {\n        nextIndex = (currentRow + 1) * 4;\n      }\n    } else {\n      // Previous\n      // If not at first column, move left\n      if (currentColumn > 0) {\n        nextIndex = currentIndex - 1;\n      }\n      // If at first column, move to last column of previous row\n      else if (currentRow > 0) {\n        nextIndex = currentRow * 4 - 1;\n      }\n      // If at first column of first row, stay put\n      else {\n        return;\n      }\n    }\n\n    // Check if next index exists\n    if (nextIndex >= 0 && nextIndex < sortedImages.length) {\n      const nextImage = sortedImages[nextIndex];\n      setActiveImageId(nextImage.id);\n      setModalImage(nextImage.image_url);\n      fetchImageDetails(nextImage.id);\n      navigate(`?id=${nextImage.id}`, {\n        replace: true\n      });\n    }\n  };\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (!modalImage) return;\n      switch (e.key) {\n        case 'ArrowLeft':\n          navigateImage(-1);\n          break;\n        case 'ArrowRight':\n          navigateImage(1);\n          break;\n        case 'Escape':\n          closeModal();\n          break;\n        default:\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [modalImage, activeImageId]);\n\n  // Add this utility function\n  const formatTimestamp = timestamp => {\n    // Replace the space with \"T\" to convert to ISO 8601 format\n    const formattedTimestamp = timestamp.replace(' ', 'T');\n    const now = new Date();\n    const commentDate = new Date(formattedTimestamp + 'Z'); // Adding 'Z' to indicate UTC\n\n    // Handle invalid date\n    if (isNaN(commentDate)) {\n      return \"Invalid date\";\n    }\n\n    // Calculate the difference in milliseconds and convert to seconds\n    const diffInSeconds = Math.floor((now.getTime() - commentDate.getTime()) / 1000);\n\n    // Check if the comment date is in the future\n    if (diffInSeconds < 0) {\n      return \"In the future\";\n    }\n    if (diffInSeconds < 60) {\n      return `${diffInSeconds}s ago`;\n    }\n    const diffInMinutes = Math.floor(diffInSeconds / 60);\n    if (diffInMinutes < 60) {\n      return `${diffInMinutes}m ago`;\n    }\n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) {\n      return `${diffInHours}h ago`;\n    }\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) {\n      return `${diffInDays}d ago`;\n    }\n\n    // Return formatted date string\n    return commentDate.toLocaleDateString(undefined, {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n  const handleUsernameClick = user_id => {\n    navigate(`/profile/${user_id}`);\n  };\n\n  // Add formatDate function\n  const formatDate = date => {\n    if (!date) return '';\n    const d = new Date(date);\n    return d.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n  const sortImages = (images, sortType, timeRange) => {\n    // First filter by time range if needed\n    let filteredImages = [...images];\n    if (sortType === 'trending') {\n      const timeRanges = {\n        'day': 24 * 60 * 60 * 1000,\n        'week': 7 * 24 * 60 * 60 * 1000,\n        'month': 30 * 24 * 60 * 60 * 1000,\n        'year': 365 * 24 * 60 * 60 * 1000\n      };\n      const cutoff = new Date(Date.now() - timeRanges[timeRange]);\n      filteredImages = filteredImages.filter(img => new Date(img.created_at) > cutoff);\n    }\n\n    // Filter by category if selected\n    if (selectedCategory !== 'all') {\n      filteredImages = filteredImages.filter(img => {\n        var _img$categories;\n        return (_img$categories = img.categories) === null || _img$categories === void 0 ? void 0 : _img$categories.includes(selectedCategory);\n      });\n    }\n\n    // Sort based on type\n    switch (sortType) {\n      case 'newest':\n        return filteredImages.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n      case 'mostLiked':\n        return filteredImages.sort((a, b) => {\n          const aLikes = likes[a.id] || 0;\n          const bLikes = likes[b.id] || 0;\n          return bLikes - aLikes;\n        });\n      case 'mostCommented':\n        return filteredImages.sort((a, b) => {\n          var _comments$b$id, _comments$a$id;\n          return (((_comments$b$id = comments[b.id]) === null || _comments$b$id === void 0 ? void 0 : _comments$b$id.length) || 0) - (((_comments$a$id = comments[a.id]) === null || _comments$a$id === void 0 ? void 0 : _comments$a$id.length) || 0);\n        });\n      case 'trending':\n        return filteredImages.sort((a, b) => {\n          var _comments$a$id2, _comments$b$id2;\n          // Get likes and comments\n          const aLikes = likes[a.id] || 0;\n          const bLikes = likes[b.id] || 0;\n          const aComments = ((_comments$a$id2 = comments[a.id]) === null || _comments$a$id2 === void 0 ? void 0 : _comments$a$id2.length) || 0;\n          const bComments = ((_comments$b$id2 = comments[b.id]) === null || _comments$b$id2 === void 0 ? void 0 : _comments$b$id2.length) || 0;\n\n          // Hours since post (minimum 1 hour)\n          const aHours = Math.max(1, (Date.now() - new Date(a.created_at)) / 3600000);\n          const bHours = Math.max(1, (Date.now() - new Date(b.created_at)) / 3600000);\n\n          // Reddit-inspired algorithm with comments weighted 2x\n          const gravity = 1.8; // Higher = faster decay\n          const aScore = (aLikes + aComments * 2) / Math.pow(aHours, gravity);\n          const bScore = (bLikes + bComments * 2) / Math.pow(bHours, gravity);\n          return bScore - aScore;\n        });\n      default:\n        return filteredImages;\n    }\n  };\n  const createColumns = (images, numColumns) => {\n    // Get sorted images using our sortImages function\n    const sortedImages = sortImages(images, sortType, timeRange);\n\n    // Initialize columns\n    const cols = Array.from({\n      length: numColumns\n    }, () => []);\n    const colHeights = new Array(numColumns).fill(0);\n\n    // Distribute in chronological order\n    sortedImages.forEach((image, index) => {\n      const targetCol = index % numColumns;\n      const aspectRatio = image.width / image.height;\n      const estimatedHeight = 250 / aspectRatio;\n      cols[targetCol].push(image);\n      colHeights[targetCol] += estimatedHeight;\n    });\n    return cols;\n  };\n  useEffect(() => {\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const columnWidth = 250; // Base column width\n      const containerWidth = width - 200; // Account for sidebar and margins\n      const calculatedColumns = Math.floor(containerWidth / columnWidth);\n      setColumns(Math.min(4, Math.max(1, calculatedColumns)));\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize();\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  const columnImages = createColumns(images, columns);\n  useEffect(() => {\n    const fetchAllData = async () => {\n      try {\n        // Get images first\n        const imagesResponse = await fetch('http://localhost:3000/images');\n        const imagesData = await imagesResponse.json();\n        setImages(imagesData.images || []);\n\n        // Then fetch details for all images\n        const token = localStorage.getItem('token');\n        if (!token) return;\n        const promises = imagesData.images.map(async image => {\n          const [detailsRes, likesRes, commentsRes] = await Promise.all([fetch(`http://localhost:3000/images/${image.id}`, {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          }), fetch(`http://localhost:3000/fetch_likes?id=${image.id}`, {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          }), fetch(`http://localhost:3000/fetch_comments?id=${image.id}`, {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          })]);\n          const [details, likes, comments] = await Promise.all([detailsRes.json(), likesRes.json(), commentsRes.json()]);\n          return {\n            id: image.id,\n            details,\n            likes,\n            comments\n          };\n        });\n        const results = await Promise.all(promises);\n\n        // Update all states at once\n        const newImageUserDetails = {};\n        const newLikes = {};\n        const newComments = {};\n        const newUserLikedImages = new Set();\n        results.forEach(({\n          id,\n          details,\n          likes,\n          comments\n        }) => {\n          newImageUserDetails[id] = details;\n          newLikes[id] = likes.likes || 0;\n          newComments[id] = comments.comments || [];\n          if (likes.userHasLiked) {\n            newUserLikedImages.add(id);\n          }\n        });\n        setImageUserDetails(newImageUserDetails);\n        setLikes(newLikes);\n        setComments(newComments);\n        setUserLikedImages(newUserLikedImages);\n      } catch (error) {\n        console.error('Error fetching all data:', error);\n      }\n    };\n    fetchAllData();\n  }, []);\n  const fetchAllData = async imageId => {\n    if (!imageId) {\n      console.log('No image ID provided');\n      return;\n    }\n    try {\n      const [likesResponse, commentsResponse] = await Promise.all([fetch(`http://localhost:3000/likes?id=${imageId}`), fetch(`http://localhost:3000/fetch_comments?id=${imageId}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      })]);\n      if (!commentsResponse.ok || !likesResponse.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      const [likesData, commentsData] = await Promise.all([likesResponse.json(), commentsResponse.json()]);\n      setLikes(prev => ({\n        ...prev,\n        [imageId]: likesData.count\n      }));\n      setComments(prev => ({\n        ...prev,\n        [imageId]: commentsData.comments\n      }));\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setComments(prev => ({\n        ...prev,\n        [imageId]: []\n      }));\n      setLikes(prev => ({\n        ...prev,\n        [imageId]: 0\n      }));\n    }\n  };\n  useEffect(() => {\n    if (activeImageId) {\n      fetchAllData(activeImageId);\n    }\n  }, [activeImageId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gallery-container\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gallery-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: sortType,\n          onChange: e => setSortType(e.target.value),\n          className: \"gallery-sort\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"newest\",\n            children: \"Newest\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mostLiked\",\n            children: \"Most Liked\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mostCommented\",\n            children: \"Most Commented\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"trending\",\n            children: \"Trending\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 25\n        }, this), sortType === 'trending' && /*#__PURE__*/_jsxDEV(\"select\", {\n          value: timeRange,\n          onChange: e => setTimeRange(e.target.value),\n          className: \"gallery-time-range\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"day\",\n            children: \"24 Hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"week\",\n            children: \"This Week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"month\",\n            children: \"This Month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"year\",\n            children: \"This Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedCategory,\n          onChange: e => setSelectedCategory(e.target.value),\n          className: \"gallery-category\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: \"All Categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"portraits\",\n            children: \"Portraits\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"landscapes\",\n            children: \"Landscapes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"abstract\",\n            children: \"Abstract\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"anime\",\n            children: \"Anime\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 680,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"gallery-heading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gallery-grid\",\n        ref: gridRef,\n        children: columnImages.map((col, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gallery-column\",\n          children: col.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gallery-item\",\n            onClick: () => openModal(image),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"gallery-thumbnail\",\n              src: image.image_url,\n              alt: image.prompt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 690,\n              columnNumber: 41\n            }, this)\n          }, image.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 37\n          }, this))\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 21\n      }, this), modalImage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gallery-modal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gallery-modal-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gallery-modal-main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"gallery-modal-image-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"gallery-close-button\",\n                onClick: closeModal,\n                children: \"\\xD7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 702,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"gallery-nav-button gallery-prev\",\n                onClick: () => navigateImage(-1),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"\\u2039\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 704,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 703,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"gallery-modal-image\",\n                src: modalImage,\n                alt: \"Enlarged\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 706,\n                columnNumber: 41\n              }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"gallery-delete-section\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"gallery-delete-button\",\n                  onClick: handleDeleteImage,\n                  children: \"Delete Image\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 709,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 708,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"gallery-nav-button gallery-next\",\n                onClick: () => navigateImage(1),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"\\u203A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 715,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 714,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 701,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"gallery-modal-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"gallery-user-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: ((_imageUserDetails$act = imageUserDetails[activeImageId]) === null || _imageUserDetails$act === void 0 ? void 0 : _imageUserDetails$act.profile_picture) || '/default-avatar.png',\n                  alt: \"Profile\",\n                  className: \"gallery-user-avatar\",\n                  onClick: () => {\n                    var _imageUserDetails$act2;\n                    return handleUsernameClick((_imageUserDetails$act2 = imageUserDetails[activeImageId]) === null || _imageUserDetails$act2 === void 0 ? void 0 : _imageUserDetails$act2.user_id);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 720,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"gallery-user-details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    onClick: () => {\n                      var _imageUserDetails$act3;\n                      return handleUsernameClick((_imageUserDetails$act3 = imageUserDetails[activeImageId]) === null || _imageUserDetails$act3 === void 0 ? void 0 : _imageUserDetails$act3.user_id);\n                    },\n                    children: (_imageUserDetails$act4 = imageUserDetails[activeImageId]) === null || _imageUserDetails$act4 === void 0 ? void 0 : _imageUserDetails$act4.username\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 727,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"gallery-creation-date\",\n                    children: formatDate((_images$find = images.find(img => img.id === activeImageId)) === null || _images$find === void 0 ? void 0 : _images$find.created_at)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 730,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 726,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"gallery-follow-button\",\n                  children: \"Follow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 734,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 719,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"gallery-modal-title\",\n                children: (_images$find2 = images.find(img => img.id === activeImageId)) === null || _images$find2 === void 0 ? void 0 : _images$find2.prompt\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 736,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"gallery-interaction-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleLike(activeImageId),\n                  className: \"gallery-action-btn\",\n                  children: [/*#__PURE__*/_jsxDEV(LikeIcon, {\n                    className: userLikedImages.has(activeImageId) ? 'liked' : ''\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 741,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: likes[activeImageId] || 0\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 742,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 740,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"gallery-action-btn\",\n                  children: [/*#__PURE__*/_jsxDEV(CommentIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 745,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: ((_comments$activeImage = comments[activeImageId]) === null || _comments$activeImage === void 0 ? void 0 : _comments$activeImage.length) || 0\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 746,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 744,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"gallery-action-btn\",\n                  children: /*#__PURE__*/_jsxDEV(ShareIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 749,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 748,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"gallery-action-btn\",\n                  children: /*#__PURE__*/_jsxDEV(BookmarkIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 752,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 751,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 739,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"gallery-comments-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"gallery-comments-heading\",\n                  children: \"Comments\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 757,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"gallery-comments-list\",\n                  children: (comments[activeImageId] || []).map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"gallery-comment-item\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"gallery-comment-avatar\",\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: comment.profile_picture ? `http://localhost:3000/${comment.profile_picture}` : '/default-avatar.png',\n                        alt: comment.username,\n                        onError: e => e.target.src = '/default-avatar.png'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 762,\n                        columnNumber: 61\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 761,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"gallery-comment-content\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"gallery-comment-header\",\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"gallery-comment-username\",\n                          onClick: () => handleUsernameClick(comment.user_id),\n                          role: \"button\",\n                          tabIndex: 0,\n                          children: comment.username\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 772,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"gallery-comment-time\",\n                          children: formatTimestamp(comment.created_at)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 780,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 771,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"gallery-comment-text\",\n                        children: comment.comment\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 784,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"gallery-comment-actions\",\n                        children: /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: \"gallery-comment-like-btn\",\n                          onClick: () => handleCommentLike(comment.id),\n                          children: [\"\\u2665 \", commentLikes[comment.id] || 0]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 786,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 785,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 770,\n                      columnNumber: 57\n                    }, this)]\n                  }, `comment-${comment.id}-${comment.created_at}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 760,\n                    columnNumber: 53\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 758,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                  onSubmit: handleCommentSubmit,\n                  className: \"gallery-comment-form\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    className: \"gallery-comment-input\",\n                    type: \"text\",\n                    value: commentInput,\n                    onChange: e => setCommentInput(e.target.value),\n                    placeholder: \"Add a comment...\",\n                    required: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 798,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"submit\",\n                    className: \"gallery-comment-submit\",\n                    children: \"Post\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 806,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 797,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 756,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 644,\n    columnNumber: 9\n  }, this);\n};\n_s(Gallery, \"9uvf22uTs2RzT8PolFnj5S6zqHA=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Gallery;\nexport default Gallery;\nvar _c;\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","jwtDecode","useNavigate","useLocation","debounce","ReactComponent","LikeIcon","CommentIcon","ShareIcon","BookmarkIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","Gallery","_s","_imageUserDetails$act","_imageUserDetails$act4","_images$find","_images$find2","_comments$activeImage","images","setImages","modalImage","setModalImage","activeImageId","setActiveImageId","likes","setLikes","comments","setComments","commentInput","setCommentInput","userLikedImages","setUserLikedImages","Set","isAdmin","setIsAdmin","username","setUsername","commentLikes","setCommentLikes","modalOpen","setModalOpen","imageUserDetails","setImageUserDetails","navigate","location","gridRef","columns","setColumns","sortType","setSortType","timeRange","setTimeRange","selectedCategory","setSelectedCategory","debouncedOpenModal","image","console","log","id","fetchImageDetails","fetchImages","response","fetch","data","json","error","checkAdminStatus","token","localStorage","getItem","decoded","role","imageId","URLSearchParams","search","get","find","img","parseInt","imageDetailsResponse","headers","ok","imageData","prev","likeResponse","likeData","userHasLiked","add","commentResponse","commentData","handleLike","userId","hasLiked","has","method","Authorization","body","JSON","stringify","Math","max","updatedLikes","delete","errorData","handleCommentSubmit","e","preventDefault","comment","commentsResponse","commentsData","handleDeleteImage","Error","filter","closeModal","alert","message","handleCommentLike","commentId","openModal","image_url","replace","navigateImage","direction","sortedImages","sortImages","currentIndex","findIndex","currentColumn","currentRow","floor","nextIndex","length","nextImage","handleKeyDown","key","window","addEventListener","removeEventListener","formatTimestamp","timestamp","formattedTimestamp","now","Date","commentDate","isNaN","diffInSeconds","getTime","diffInMinutes","diffInHours","diffInDays","toLocaleDateString","undefined","year","month","day","handleUsernameClick","user_id","formatDate","date","d","filteredImages","timeRanges","cutoff","created_at","_img$categories","categories","includes","sort","a","b","aLikes","bLikes","_comments$b$id","_comments$a$id","_comments$a$id2","_comments$b$id2","aComments","bComments","aHours","bHours","gravity","aScore","pow","bScore","createColumns","numColumns","cols","Array","from","colHeights","fill","forEach","index","targetCol","aspectRatio","width","height","estimatedHeight","push","handleResize","innerWidth","columnWidth","containerWidth","calculatedColumns","min","columnImages","fetchAllData","imagesResponse","imagesData","promises","map","detailsRes","likesRes","commentsRes","Promise","all","details","results","newImageUserDetails","newLikes","newComments","newUserLikedImages","likesResponse","likesData","count","className","children","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","ref","col","colIndex","onClick","src","alt","prompt","profile_picture","_imageUserDetails$act2","_imageUserDetails$act3","onError","tabIndex","onSubmit","type","placeholder","required","_c","$RefreshReg$"],"sources":["/Users/jack/image-generator/client/src/pages/Gallery.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Ensure jwt-decode is installed\nimport './Gallery.css'; // Make sure this file exists with proper styles\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport debounce from 'lodash.debounce'; // Ensure lodash.debounce is installed\nimport { ReactComponent as LikeIcon } from '../assets/icons/like.svg';\nimport { ReactComponent as CommentIcon } from '../assets/icons/comment.svg';\nimport { ReactComponent as ShareIcon } from '../assets/icons/share.svg';\nimport { ReactComponent as BookmarkIcon } from '../assets/icons/bookmark.svg';\n\nconst Gallery = () => {\n    const [images, setImages] = useState([]);\n    const [modalImage, setModalImage] = useState(null);\n    const [activeImageId, setActiveImageId] = useState(null);\n    const [likes, setLikes] = useState({});\n    const [comments, setComments] = useState({});\n    const [commentInput, setCommentInput] = useState('');\n    const [userLikedImages, setUserLikedImages] = useState(new Set());\n    const [isAdmin, setIsAdmin] = useState(false);\n    const [username, setUsername] = useState(''); // For storing the username from the token\n    const [commentLikes, setCommentLikes] = useState({});\n    const [modalOpen, setModalOpen] = useState(false); // Add modalOpen state\n    const [imageUserDetails, setImageUserDetails] = useState({});\n    const navigate = useNavigate();\n    const location = useLocation();\n    const gridRef = useRef(null);\n    const [columns, setColumns] = useState(4);\n    const [sortType, setSortType] = useState('newest');\n    const [timeRange, setTimeRange] = useState('week');\n    const [selectedCategory, setSelectedCategory] = useState('all');\n\n    // Add debounce wrapper at top of component\n    const debouncedOpenModal = useCallback(\n        debounce((image) => {\n            console.log('Opening modal for image ID:', image.id);\n            setActiveImageId(image.id);\n            setModalOpen(true);\n            fetchImageDetails(image.id);\n        }, 300),\n        []\n    );\n\n    useEffect(() => {\n        const fetchImages = async () => {\n            try {\n                const response = await fetch('http://localhost:3000/images');\n                const data = await response.json();\n                setImages(data.images || []);\n            } catch (error) {\n                console.error('Error fetching images:', error);\n            }\n        };\n\n        const checkAdminStatus = () => {\n            const token = localStorage.getItem('token');\n            if (token) {\n                const decoded = jwtDecode(token);\n                setIsAdmin(decoded.role === 'admin');\n                setUsername(decoded.username); // Extract the username from the token\n            }\n        };\n\n        fetchImages();\n        checkAdminStatus();\n    }, []);\n\n    // Modify useEffect that handles URL parameters\n    useEffect(() => {\n        const imageId = new URLSearchParams(location.search).get('id');\n        if (imageId) {\n            const image = images.find(img => img.id === parseInt(imageId));\n            if (image && !modalOpen) {  // Add modalOpen check\n                debouncedOpenModal(image);\n            }\n        }\n    }, [location, images, modalOpen]); // Add proper dependencies\n\n    const fetchImageDetails = async (imageId) => {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n\n        try {\n            // Fetch user details for image\n            const imageDetailsResponse = await fetch(`http://localhost:3000/images/${imageId}`, {\n                headers: {\n                    'Authorization': `Bearer ${token}`\n                }\n            });\n            if (imageDetailsResponse.ok) {\n                const imageData = await imageDetailsResponse.json();\n                setImageUserDetails(prev => ({\n                    ...prev,\n                    [imageId]: imageData\n                }));\n            }\n\n            // Existing likes/comments fetch\n            const likeResponse = await fetch(`http://localhost:3000/fetch_likes?id=${imageId}`, {\n                headers: {\n                    'Authorization': `Bearer ${token}`\n                }\n            });\n            if (likeResponse.ok) {\n                const likeData = await likeResponse.json();\n                setLikes((prev) => ({ ...prev, [imageId]: likeData.likes || 0 }));\n                if (likeData.userHasLiked) {\n                    setUserLikedImages((prev) => new Set(prev).add(imageId));\n                }\n            }\n\n            const commentResponse = await fetch(`http://localhost:3000/fetch_comments?id=${imageId}`, {\n                headers: {\n                    'Authorization': `Bearer ${token}` \n                }\n            });\n            if (commentResponse.ok) {\n                const commentData = await commentResponse.json();\n                // Comments should now include profile_picture from backend\n                setComments((prev) => ({ ...prev, [imageId]: commentData.comments || [] }));\n            }\n        } catch (error) {\n            console.error('Error fetching image details:', error);\n        }\n    };\n\n    const handleLike = async () => {\n        const token = localStorage.getItem('token');\n        if (!token) return; // Exit if no token is found\n    \n        const userId = jwtDecode(token).userId; // Decode the token to get userId\n        const hasLiked = userLikedImages.has(activeImageId); // Check if the user has already liked this image\n    \n        try {\n            const response = hasLiked \n                ? await fetch('http://localhost:3000/remove_like', { // Send request to remove like\n                    method: 'DELETE',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`,\n                    },\n                    body: JSON.stringify({\n                        userId, // Include userId\n                        imageId: activeImageId, // Current imageId\n                    }),\n                })\n                : await fetch('http://localhost:3000/add_like', { // Send request to add like\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`,\n                    },\n                    body: JSON.stringify({\n                        userId, // Include userId\n                        imageId: activeImageId, // Current imageId\n                    }),\n                });\n    \n            if (response.ok) {\n                if (hasLiked) {\n                    // Remove like\n                    setLikes((prev) => ({\n                        ...prev,\n                        [activeImageId]: Math.max((prev[activeImageId] || 0) - 1, 0),\n                    }));\n                    setUserLikedImages((prev) => {\n                        const updatedLikes = new Set(prev);\n                        updatedLikes.delete(activeImageId);\n                        return updatedLikes;\n                    });\n                } else {\n                    // Add like\n                    setLikes((prev) => ({\n                        ...prev,\n                        [activeImageId]: (prev[activeImageId] || 0) + 1,\n                    }));\n                    setUserLikedImages((prev) => new Set(prev).add(activeImageId));\n                }\n            } else {\n                const errorData = await response.json();\n                console.error('Error toggling like:', errorData);\n            }\n        } catch (error) {\n            console.error('Error toggling like:', error);\n        }\n    };\n\n    // Update comment state when adding new comment\n    const handleCommentSubmit = async (e) => {\n        e.preventDefault();\n        const token = localStorage.getItem('token');\n        if (!token) return;\n    \n        try {\n            const decoded = jwtDecode(token);\n            const userId = decoded.userId;\n    \n            // Post the new comment\n            const response = await fetch('http://localhost:3000/add_comment', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                body: JSON.stringify({ userId, imageId: activeImageId, comment: commentInput }),\n            });\n    \n            if (response.ok) {\n                // After adding the comment, fetch all comments again\n                const commentsResponse = await fetch(`http://localhost:3000/fetch_comments?id=${activeImageId}`, {\n                    headers: {\n                        Authorization: `Bearer ${token}`,\n                    },\n                });\n    \n                if (commentsResponse.ok) {\n                    const commentsData = await commentsResponse.json();\n                    // Update comments state with the latest comments\n                    setComments((prev) => ({\n                        ...prev,\n                        [activeImageId]: commentsData.comments, // Use the fetched comments\n                    }));\n                    setCommentInput(''); // Clear the comment input\n                } else {\n                    console.error('Error fetching comments:', await commentsResponse.json());\n                }\n            } else {\n                console.error('Error adding comment:', await response.json());\n            }\n        } catch (error) {\n            console.error('Error adding comment:', error);\n        }\n    };\n\n    const handleDeleteImage = async () => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            console.error('No authentication token found');\n            return;\n        }\n    \n        console.log(\"Attempting to delete image:\", activeImageId);\n    \n        try {\n            const response = await fetch(`http://localhost:3000/delete_image/${activeImageId}`, {\n                method: 'DELETE',\n                headers: { \n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                }\n            });\n    \n            if (!response.ok) {\n                const data = await response.json();\n                throw new Error(data.error || 'Failed to delete image');\n            }\n    \n            setImages(prev => prev.filter(image => image.id !== activeImageId));\n            closeModal();\n        } catch (error) {\n            console.error('Error deleting image:', error);\n            alert(error.message);\n        }\n    };\n\n    const handleCommentLike = async (commentId) => {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n    \n        try {\n            const response = await fetch('http://localhost:3000/like_comment', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`,\n                },\n                body: JSON.stringify({ commentId }),\n            });\n    \n            if (response.ok) {\n                setCommentLikes(prev => ({\n                    ...prev,\n                    [commentId]: (prev[commentId] || 0) + 1\n                }));\n            }\n        } catch (error) {\n            console.error('Error liking comment:', error);\n        }\n    };\n\n    const openModal = (image) => {\n        setModalImage(image.image_url);\n        setActiveImageId(image.id);\n        console.log('Opening modal for image ID:', image.id); // Debug log\n        fetchImageDetails(image.id);\n        navigate(`?id=${image.id}`, { replace: true });\n    };\n\n    const closeModal = () => {\n        setModalImage(null);\n        setActiveImageId(null);\n        navigate('', { replace: true });\n    };\n\n    const navigateImage = (direction) => {\n        const sortedImages = sortImages(images, sortType, timeRange);\n        const currentIndex = sortedImages.findIndex(img => img.id === activeImageId);\n        \n        // Calculate current position in grid\n        const currentColumn = currentIndex % 4;\n        const currentRow = Math.floor(currentIndex / 4);\n        \n        let nextIndex;\n        if (direction === 1) { // Next\n            // If not at last column, move right\n            if (currentColumn < 3) {\n                nextIndex = currentIndex + 1;\n            } \n            // If at last column, move to first column of next row\n            else {\n                nextIndex = (currentRow + 1) * 4;\n            }\n        } else { // Previous\n            // If not at first column, move left\n            if (currentColumn > 0) {\n                nextIndex = currentIndex - 1;\n            }\n            // If at first column, move to last column of previous row\n            else if (currentRow > 0) {\n                nextIndex = (currentRow * 4) - 1;\n            }\n            // If at first column of first row, stay put\n            else {\n                return;\n            }\n        }\n        \n        // Check if next index exists\n        if (nextIndex >= 0 && nextIndex < sortedImages.length) {\n            const nextImage = sortedImages[nextIndex];\n            setActiveImageId(nextImage.id);\n            setModalImage(nextImage.image_url);\n            fetchImageDetails(nextImage.id);\n            navigate(`?id=${nextImage.id}`, { replace: true });\n        }\n    };\n\n    useEffect(() => {\n        const handleKeyDown = (e) => {\n            if (!modalImage) return;\n\n            switch(e.key) {\n                case 'ArrowLeft':\n                    navigateImage(-1);\n                    break;\n                case 'ArrowRight':\n                    navigateImage(1);\n                    break;\n                case 'Escape':\n                    closeModal();\n                    break;\n                default:\n                    break;\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyDown);\n        return () => window.removeEventListener('keydown', handleKeyDown);\n    }, [modalImage, activeImageId]);\n\n    // Add this utility function\n    const formatTimestamp = (timestamp) => {\n        // Replace the space with \"T\" to convert to ISO 8601 format\n        const formattedTimestamp = timestamp.replace(' ', 'T');\n    \n        const now = new Date();\n        const commentDate = new Date(formattedTimestamp + 'Z'); // Adding 'Z' to indicate UTC\n    \n        // Handle invalid date\n        if (isNaN(commentDate)) {\n            return \"Invalid date\";\n        }\n    \n        // Calculate the difference in milliseconds and convert to seconds\n        const diffInSeconds = Math.floor((now.getTime() - commentDate.getTime()) / 1000);\n    \n        // Check if the comment date is in the future\n        if (diffInSeconds < 0) {\n            return \"In the future\";\n        }\n    \n        if (diffInSeconds < 60) {\n            return `${diffInSeconds}s ago`;\n        }\n    \n        const diffInMinutes = Math.floor(diffInSeconds / 60);\n        if (diffInMinutes < 60) {\n            return `${diffInMinutes}m ago`;\n        }\n    \n        const diffInHours = Math.floor(diffInMinutes / 60);\n        if (diffInHours < 24) {\n            return `${diffInHours}h ago`;\n        }\n    \n        const diffInDays = Math.floor(diffInHours / 24);\n        if (diffInDays < 7) {\n            return `${diffInDays}d ago`;\n        }\n    \n        // Return formatted date string\n        return commentDate.toLocaleDateString(undefined, {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n        });\n    };\n        \n    const handleUsernameClick = (user_id) => {\n        navigate(`/profile/${user_id}`);\n    };\n\n    // Add formatDate function\n    const formatDate = (date) => {\n        if (!date) return '';\n        const d = new Date(date);\n        return d.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n        });\n    };\n\n    const sortImages = (images, sortType, timeRange) => {\n        // First filter by time range if needed\n        let filteredImages = [...images];\n        \n        if (sortType === 'trending') {\n            const timeRanges = {\n                'day': 24 * 60 * 60 * 1000,\n                'week': 7 * 24 * 60 * 60 * 1000,\n                'month': 30 * 24 * 60 * 60 * 1000,\n                'year': 365 * 24 * 60 * 60 * 1000\n            };\n            const cutoff = new Date(Date.now() - timeRanges[timeRange]);\n            filteredImages = filteredImages.filter(img => new Date(img.created_at) > cutoff);\n        }\n    \n        // Filter by category if selected\n        if (selectedCategory !== 'all') {\n            filteredImages = filteredImages.filter(img => \n                img.categories?.includes(selectedCategory)\n            );\n        }\n    \n        // Sort based on type\n        switch(sortType) {\n            case 'newest':\n                return filteredImages.sort((a, b) => \n                    new Date(b.created_at) - new Date(a.created_at)\n                );\n            case 'mostLiked':\n                return filteredImages.sort((a, b) => {\n                    const aLikes = (likes[a.id] || 0);\n                    const bLikes = (likes[b.id] || 0);\n                    return bLikes - aLikes;\n                });\n            case 'mostCommented':\n                return filteredImages.sort((a, b) => \n                    (comments[b.id]?.length || 0) - (comments[a.id]?.length || 0)\n                );\n                case 'trending':\n                    return filteredImages.sort((a, b) => {\n                        // Get likes and comments\n                        const aLikes = (likes[a.id] || 0);\n                        const bLikes = (likes[b.id] || 0);\n                        const aComments = (comments[a.id]?.length || 0);\n                        const bComments = (comments[b.id]?.length || 0);\n                        \n                        // Hours since post (minimum 1 hour)\n                        const aHours = Math.max(1, (Date.now() - new Date(a.created_at)) / 3600000);\n                        const bHours = Math.max(1, (Date.now() - new Date(b.created_at)) / 3600000);\n                        \n                        // Reddit-inspired algorithm with comments weighted 2x\n                        const gravity = 1.8; // Higher = faster decay\n                        const aScore = (aLikes + (aComments * 2)) / Math.pow(aHours, gravity);\n                        const bScore = (bLikes + (bComments * 2)) / Math.pow(bHours, gravity);\n                        \n                        return bScore - aScore;\n                    });\n            default:\n                return filteredImages;\n        }\n    };\n\n    const createColumns = (images, numColumns) => {\n        // Get sorted images using our sortImages function\n        const sortedImages = sortImages(images, sortType, timeRange);\n        \n        // Initialize columns\n        const cols = Array.from({ length: numColumns }, () => []);\n        const colHeights = new Array(numColumns).fill(0);\n        \n        // Distribute in chronological order\n        sortedImages.forEach((image, index) => {\n            const targetCol = index % numColumns;\n            const aspectRatio = image.width / image.height;\n            const estimatedHeight = 250 / aspectRatio;\n            \n            cols[targetCol].push(image);\n            colHeights[targetCol] += estimatedHeight;\n        });\n        \n        return cols;\n    };\n\n    useEffect(() => {\n        const handleResize = () => {\n            const width = window.innerWidth;\n            const columnWidth = 250; // Base column width\n            const containerWidth = width - 200; // Account for sidebar and margins\n            const calculatedColumns = Math.floor(containerWidth / columnWidth);\n            setColumns(Math.min(4, Math.max(1, calculatedColumns)));\n        };\n    \n        window.addEventListener('resize', handleResize);\n        handleResize();\n    \n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n    \n    const columnImages = createColumns(images, columns);\n\n    useEffect(() => {\n        const fetchAllData = async () => {\n            try {\n                // Get images first\n                const imagesResponse = await fetch('http://localhost:3000/images');\n                const imagesData = await imagesResponse.json();\n                setImages(imagesData.images || []);\n\n                // Then fetch details for all images\n                const token = localStorage.getItem('token');\n                if (!token) return;\n\n                const promises = imagesData.images.map(async (image) => {\n                    const [detailsRes, likesRes, commentsRes] = await Promise.all([\n                        fetch(`http://localhost:3000/images/${image.id}`, {\n                            headers: { 'Authorization': `Bearer ${token}` }\n                        }),\n                        fetch(`http://localhost:3000/fetch_likes?id=${image.id}`, {\n                            headers: { 'Authorization': `Bearer ${token}` }\n                        }),\n                        fetch(`http://localhost:3000/fetch_comments?id=${image.id}`, {\n                            headers: { 'Authorization': `Bearer ${token}` }\n                        })\n                    ]);\n\n                    const [details, likes, comments] = await Promise.all([\n                        detailsRes.json(),\n                        likesRes.json(),\n                        commentsRes.json()\n                    ]);\n\n                    return {\n                        id: image.id,\n                        details,\n                        likes,\n                        comments\n                    };\n                });\n\n                const results = await Promise.all(promises);\n\n                // Update all states at once\n                const newImageUserDetails = {};\n                const newLikes = {};\n                const newComments = {};\n                const newUserLikedImages = new Set();\n\n                results.forEach(({ id, details, likes, comments }) => {\n                    newImageUserDetails[id] = details;\n                    newLikes[id] = likes.likes || 0;\n                    newComments[id] = comments.comments || [];\n                    if (likes.userHasLiked) {\n                        newUserLikedImages.add(id);\n                    }\n                });\n\n                setImageUserDetails(newImageUserDetails);\n                setLikes(newLikes);\n                setComments(newComments);\n                setUserLikedImages(newUserLikedImages);\n\n            } catch (error) {\n                console.error('Error fetching all data:', error);\n            }\n        };\n\n        fetchAllData();\n    }, []);\n\n    const fetchAllData = async (imageId) => {\n        if (!imageId) {\n            console.log('No image ID provided');\n            return;\n        }\n    \n        try {\n            const [likesResponse, commentsResponse] = await Promise.all([\n                fetch(`http://localhost:3000/likes?id=${imageId}`),\n                fetch(`http://localhost:3000/fetch_comments?id=${imageId}`, {\n                    headers: {\n                        'Authorization': `Bearer ${localStorage.getItem('token')}`\n                    }\n                })\n            ]);\n    \n            if (!commentsResponse.ok || !likesResponse.ok) {\n                throw new Error('Failed to fetch data');\n            }\n    \n            const [likesData, commentsData] = await Promise.all([\n                likesResponse.json(),\n                commentsResponse.json()\n            ]);\n    \n            setLikes(prev => ({ ...prev, [imageId]: likesData.count }));\n            setComments(prev => ({ ...prev, [imageId]: commentsData.comments }));\n            \n        } catch (error) {\n            console.error('Error fetching data:', error);\n            setComments(prev => ({ ...prev, [imageId]: [] }));\n            setLikes(prev => ({ ...prev, [imageId]: 0 }));\n        }\n    };\n    \n    useEffect(() => {\n        if (activeImageId) {\n            fetchAllData(activeImageId);\n        }\n    }, [activeImageId]);\n\n    return (\n        <div className=\"gallery-container\">\n                <>\n                    <div className=\"gallery-controls\">\n                        <select \n                            value={sortType} \n                            onChange={(e) => setSortType(e.target.value)}\n                            className=\"gallery-sort\"\n                        >\n                            <option value=\"newest\">Newest</option>\n                            <option value=\"mostLiked\">Most Liked</option>\n                            <option value=\"mostCommented\">Most Commented</option>\n                            <option value=\"trending\">Trending</option>\n                        </select>\n\n                        {sortType === 'trending' && (\n                            <select\n                                value={timeRange}\n                                onChange={(e) => setTimeRange(e.target.value)}\n                                className=\"gallery-time-range\"\n                            >\n                                <option value=\"day\">24 Hours</option>\n                                <option value=\"week\">This Week</option>\n                                <option value=\"month\">This Month</option>\n                                <option value=\"year\">This Year</option>\n                            </select>\n                        )}\n\n                        <select\n                            value={selectedCategory}\n                            onChange={(e) => setSelectedCategory(e.target.value)}\n                            className=\"gallery-category\"\n                        >\n                            <option value=\"all\">All Categories</option>\n                            <option value=\"portraits\">Portraits</option>\n                            <option value=\"landscapes\">Landscapes</option>\n                            <option value=\"abstract\">Abstract</option>\n                            <option value=\"anime\">Anime</option>\n                            {/* Add more categories as needed */}\n                        </select>\n                    </div>\n                    <h2 className=\"gallery-heading\"></h2>\n                    <div className=\"gallery-grid\" ref={gridRef}>\n                        {columnImages.map((col, colIndex) => (\n                            <div key={colIndex} className=\"gallery-column\">\n                                {col.map((image) => (\n                                    <div key={image.id} className=\"gallery-item\" onClick={() => openModal(image)}>\n                                        <img className=\"gallery-thumbnail\" src={image.image_url} alt={image.prompt} />\n                                    </div>\n                                ))}\n                            </div>\n                        ))}\n                    </div>\n\n                    {modalImage && (\n                        <div className=\"gallery-modal\">\n                            <div className=\"gallery-modal-content\">\n                                <div className=\"gallery-modal-main\">\n                                    <div className=\"gallery-modal-image-container\">\n                                        <button className=\"gallery-close-button\" onClick={closeModal}>×</button>\n                                        <button className=\"gallery-nav-button gallery-prev\" onClick={() => navigateImage(-1)}>\n                                            <span>‹</span>\n                                        </button>\n                                        <img className=\"gallery-modal-image\" src={modalImage} alt=\"Enlarged\" />\n                                        {isAdmin && (\n                                            <div className=\"gallery-delete-section\">\n                                                <button className=\"gallery-delete-button\" onClick={handleDeleteImage}>\n                                                    Delete Image\n                                                </button>\n                                            </div>\n                                        )}\n                                        <button className=\"gallery-nav-button gallery-next\" onClick={() => navigateImage(1)}>\n                                            <span>›</span>\n                                        </button>\n                                    </div>\n                                    <div className=\"gallery-modal-info\">\n                                        <div className=\"gallery-user-info\">\n                                            <img \n                                                src={imageUserDetails[activeImageId]?.profile_picture || '/default-avatar.png'}\n                                                alt=\"Profile\"\n                                                className=\"gallery-user-avatar\"\n                                                onClick={() => handleUsernameClick(imageUserDetails[activeImageId]?.user_id)}\n                                            />\n                                            <div className=\"gallery-user-details\">\n                                                <h4 onClick={() => handleUsernameClick(imageUserDetails[activeImageId]?.user_id)}>\n                                                    {imageUserDetails[activeImageId]?.username}\n                                                </h4>\n                                                <span className=\"gallery-creation-date\">\n                                                    {formatDate(images.find(img => img.id === activeImageId)?.created_at)}\n                                                </span>\n                                            </div>\n                                            <button className=\"gallery-follow-button\">Follow</button>\n                                        </div>\n                                        <div className=\"gallery-modal-title\">\n                                            {images.find(img => img.id === activeImageId)?.prompt}\n                                        </div>\n                                        <div className=\"gallery-interaction-buttons\">\n                                            <button onClick={() => handleLike(activeImageId)} className=\"gallery-action-btn\">\n                                                <LikeIcon className={userLikedImages.has(activeImageId) ? 'liked' : ''} />\n                                                <span>{likes[activeImageId] || 0}</span>\n                                            </button>\n                                            <button className=\"gallery-action-btn\">\n                                                <CommentIcon />\n                                                <span>{comments[activeImageId]?.length || 0}</span>\n                                            </button>\n                                            <button className=\"gallery-action-btn\">\n                                                <ShareIcon />\n                                            </button>\n                                            <button className=\"gallery-action-btn\">\n                                                <BookmarkIcon />\n                                            </button>\n                                        </div>\n                                        {/* Existing comments section */}\n                                        <div className=\"gallery-comments-section\">\n                                            <h4 className=\"gallery-comments-heading\">Comments</h4>\n                                            <ul className=\"gallery-comments-list\">\n                                                {(comments[activeImageId] || []).map((comment) => (\n                                                    <li key={`comment-${comment.id}-${comment.created_at}`} className=\"gallery-comment-item\">\n                                                        <div className=\"gallery-comment-avatar\">\n                                                            <img \n                                                                src={comment.profile_picture ? \n                                                                    `http://localhost:3000/${comment.profile_picture}` : \n                                                                    '/default-avatar.png'} \n                                                                alt={comment.username}\n                                                                onError={(e) => e.target.src = '/default-avatar.png'}\n                                                            />\n                                                        </div>\n                                                        <div className=\"gallery-comment-content\">\n                                                            <div className=\"gallery-comment-header\">\n                                                                <span \n                                                                    className=\"gallery-comment-username\"\n                                                                    onClick={() => handleUsernameClick(comment.user_id)}\n                                                                    role=\"button\"\n                                                                    tabIndex={0}\n                                                                >\n                                                                    {comment.username}\n                                                                </span>\n                                                                <span className=\"gallery-comment-time\">\n                                                                    {formatTimestamp(comment.created_at)}\n                                                                </span>\n                                                            </div>\n                                                            <p className=\"gallery-comment-text\">{comment.comment}</p>\n                                                            <div className=\"gallery-comment-actions\">\n                                                                <button \n                                                                    className=\"gallery-comment-like-btn\"\n                                                                    onClick={() => handleCommentLike(comment.id)}\n                                                                >\n                                                                    ♥ {commentLikes[comment.id] || 0}\n                                                                </button>\n                                                            </div>\n                                                        </div>\n                                                    </li>\n                                                ))}\n                                            </ul>\n                                            <form onSubmit={handleCommentSubmit} className=\"gallery-comment-form\">\n                                                <input\n                                                    className=\"gallery-comment-input\"\n                                                    type=\"text\"\n                                                    value={commentInput}\n                                                    onChange={(e) => setCommentInput(e.target.value)}\n                                                    placeholder=\"Add a comment...\"\n                                                    required\n                                                />\n                                                <button type=\"submit\" className=\"gallery-comment-submit\">Post</button>\n                                            </form>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </>\n        </div>\n    );\n};\n\nexport default Gallery;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}